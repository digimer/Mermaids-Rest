ARM GAS  /tmp/ccRinTmK.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB53:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 The Digital Mermaid.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under the GPL v3, the terms can be found in the 
  13:Core/Src/main.c ****   * LICENSE file in the root directory of this software component.
  14:Core/Src/main.c ****   *
  15:Core/Src/main.c ****   ******************************************************************************
  16:Core/Src/main.c ****   */
  17:Core/Src/main.c **** /* USER CODE END Header */
  18:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  19:Core/Src/main.c **** #include "ioctl.h"
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "config.h"
  22:Core/Src/main.c **** //#include "nd_lcd.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** #include <inttypes.h>
  27:Core/Src/main.c **** #include <stdio.h>
  28:Core/Src/main.c **** #include <string.h>
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** //#include "Wire.h"
  31:Core/Src/main.c **** //#include "math.h"
  32:Core/Src/main.c **** //#include "Adafruit_MCP4725.h"
  33:Core/Src/main.c **** 
ARM GAS  /tmp/ccRinTmK.s 			page 2


  34:Core/Src/main.c **** /* USER CODE END Includes */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PTD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** // Remove this define in order to stop outputting to serial
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** // Set this value to 9, 8, 7, 6 or 5 to adjust the resolution
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PD */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  51:Core/Src/main.c **** /* USER CODE BEGIN PM */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE END PM */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  56:Core/Src/main.c **** ADC_HandleTypeDef hadc;
  57:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** I2C_HandleTypeDef hi2c_dac;  // rename to 'hi2c_dac' DAC
  60:Core/Src/main.c **** I2C_HandleTypeDef hi2c_lcd;  // rename to 'hi2c_lcd' LCD
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  63:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** UART_HandleTypeDef huart2;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE BEGIN PV */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* USER CODE END PV */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  72:Core/Src/main.c **** void SystemClock_Config(void);
  73:Core/Src/main.c **** static void MX_GPIO_Init(void);
  74:Core/Src/main.c **** static void MX_DMA_Init(void);
  75:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  76:Core/Src/main.c **** static void MX_ADC_Init(void);
  77:Core/Src/main.c **** static void MX_I2C1_Init(void);
  78:Core/Src/main.c **** static void MX_I2C2_Init(void);
  79:Core/Src/main.c **** static void MX_TIM3_Init(void);
  80:Core/Src/main.c **** static void MX_TIM1_Init(void);
  81:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** // Forward declaration of init functionCore/Src/nd_lcd.c
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /* USER CODE END PFP */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  88:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** /* USER CODE END 0 */
ARM GAS  /tmp/ccRinTmK.s 			page 3


  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /**
  93:Core/Src/main.c ****   * @brief  The application entry point.
  94:Core/Src/main.c ****   * @retval int
  95:Core/Src/main.c ****   */
  96:Core/Src/main.c **** int main(void)
  97:Core/Src/main.c **** {
  98:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END 1 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 105:Core/Src/main.c ****   HAL_Init();
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE END Init */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Configure the system clock */
 112:Core/Src/main.c ****   SystemClock_Config();
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE END SysInit */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Initialize all configured peripherals */
 119:Core/Src/main.c ****   MX_GPIO_Init();
 120:Core/Src/main.c ****   MX_DMA_Init();
 121:Core/Src/main.c ****   // TODO: Uncomment these out
 122:Core/Src/main.c ****   MX_USART2_UART_Init();
 123:Core/Src/main.c ****   MX_ADC_Init();
 124:Core/Src/main.c ****   MX_I2C1_Init();
 125:Core/Src/main.c ****   MX_I2C2_Init();
 126:Core/Src/main.c ****   //MX_TIM3_Init();
 127:Core/Src/main.c ****   MX_TIM1_Init();
 128:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   //uint8_t count = 0;
 131:Core/Src/main.c ****   uint8_t mainSwitchValue         = 0;
 132:Core/Src/main.c ****   uint8_t speedHighSwitchValue    = 0; // 0 = Off, 1 = Selected (inverted at GPIO read)
 133:Core/Src/main.c ****   uint8_t speedLowSwitchValue     = 0; // 0 = Off, 1 = Selected (inverted at GPIO read)
 134:Core/Src/main.c ****   uint8_t lcd1SelPrevSwitchValue  = 0; // 0 = Off, 1 = Selected (inverted at GPIO read)
 135:Core/Src/main.c ****   uint8_t lcd1SelNextSwitchValue  = 0; // 0 = Off, 1 = Selected (inverted at GPIO read)
 136:Core/Src/main.c ****   uint8_t throttleStopSwitchValue = 0; // 0 = Run, 1 = Stop
 137:Core/Src/main.c ****   uint8_t speedSelect             = 1; // 0 = Low, 1 = Med, 2 = High, 3 = E-Stop
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   // ADC values
 140:Core/Src/main.c ****   uint16_t adcThrottleValue = 2047; // Mid-point is "neutral"
 141:Core/Src/main.c ****   uint16_t adcRegenValue    = 0;    // Disable regen
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   // LCD1 Page Display
 144:Core/Src/main.c ****   uint8_t lcd1Pages    = 2; // Max page
 145:Core/Src/main.c ****   uint8_t lcd1ShowPage = 0; // Integer changes the data shown on LCD1 (for now, serial)
 146:Core/Src/main.c ****    
 147:Core/Src/main.c ****   //uint8_t Test[] = "Mermaid's Rest - mhelm v0.1\r\n"; //Data to send
ARM GAS  /tmp/ccRinTmK.s 			page 4


 148:Core/Src/main.c ****   uint8_t Test[128];
 149:Core/Src/main.c ****   uint8_t Speed[16];
 150:Core/Src/main.c ****   uint8_t Pots[128];
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE END 2 */
 153:Core/Src/main.c ****   ioctl_init();
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   // start timers
 156:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim1);
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   /* Infinite loop */
 159:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 160:Core/Src/main.c ****   // Ground the red pin, set high the green and blue pins
 161:Core/Src/main.c ****   HAL_GPIO_WritePin(LCD1_BL_RED_GPIO_Port, LCD1_BL_RED_Pin, 0);
 162:Core/Src/main.c ****   HAL_GPIO_WritePin(LCD1_BL_GREEN_GPIO_Port, LCD1_BL_GREEN_Pin, 1);
 163:Core/Src/main.c ****   HAL_GPIO_WritePin(LCD1_BL_BLUE_GPIO_Port, LCD1_BL_BLUE_Pin, 1);
 164:Core/Src/main.c ****   while (1)
 165:Core/Src/main.c ****   {
 166:Core/Src/main.c ****     // Read the switch states
 167:Core/Src/main.c ****     speedSelect             = 1; // Medium speed is default
 168:Core/Src/main.c ****     mainSwitchValue         = HAL_GPIO_ReadPin(MAIN_SW_IN_GPIO_Port, MAIN_SW_IN_Pin);
 169:Core/Src/main.c ****     speedHighSwitchValue    = 1 - HAL_GPIO_ReadPin(SPEED_HIGH_SW_IN_GPIO_Port, SPEED_HIGH_SW_IN_Pin
 170:Core/Src/main.c ****     speedLowSwitchValue     = 1 - HAL_GPIO_ReadPin(SPEED_LOW_SW_IN_GPIO_Port, SPEED_LOW_SW_IN_Pin);
 171:Core/Src/main.c ****     lcd1SelPrevSwitchValue  = 1 - HAL_GPIO_ReadPin(LCD1_SELECT_PREV_GPIO_Port, LCD1_SELECT_PREV_Pin
 172:Core/Src/main.c ****     lcd1SelNextSwitchValue  = 1 - HAL_GPIO_ReadPin(LCD1_SELECT_NEXT_GPIO_Port, LCD1_SELECT_NEXT_Pin
 173:Core/Src/main.c ****     throttleStopSwitchValue = HAL_GPIO_ReadPin(THROTTLE_STOP_SW_IN_GPIO_Port, THROTTLE_STOP_SW_IN_P
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****     if (mainSwitchValue == 0) {
 176:Core/Src/main.c ****       //HAL_GPIO_WritePin(LCD1_BL_RED_GPIO_Port, LCD1_BL_RED_Pin, 0);
 177:Core/Src/main.c ****     } else {
 178:Core/Src/main.c ****       //HAL_GPIO_WritePin(LCD1_BL_RED_GPIO_Port, LCD1_BL_RED_Pin, 1);
 179:Core/Src/main.c ****     }
 180:Core/Src/main.c ****     
 181:Core/Src/main.c ****     // Emergency Stop logic
 182:Core/Src/main.c ****     if (throttleStopSwitchValue == 1){
 183:Core/Src/main.c ****       // Shut everything down
 184:Core/Src/main.c ****       speedSelect         = 3;    // E-Stop
 185:Core/Src/main.c ****       speedLowSwitchValue = 1;    // Set slow speed
 186:Core/Src/main.c ****       adcThrottleValue    = 2048; // Set the throttle to neutral
 187:Core/Src/main.c ****       adcRegenValue       = 4095; // Set the regen to max
 188:Core/Src/main.c ****     } else {
 189:Core/Src/main.c ****       // Do normal logic
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****       // Read in the potentiometers
 192:Core/Src/main.c ****       adcThrottleValue = ioctl_get_pot(IOCTL_THROTTLE_POT); // get the adc value for the throttle 
 193:Core/Src/main.c ****       adcRegenValue    = ioctl_get_pot(IOCTL_REGEN_POT);    // get the adc value for the regen
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****       // What speed?
 196:Core/Src/main.c ****       if (speedLowSwitchValue == 1) {
 197:Core/Src/main.c ****         speedSelect = 0;
 198:Core/Src/main.c ****       } else if (speedHighSwitchValue) {
 199:Core/Src/main.c ****         speedSelect = 2;
 200:Core/Src/main.c ****       }
 201:Core/Src/main.c ****     }
 202:Core/Src/main.c ****     
 203:Core/Src/main.c ****     // Handle LCD paging
 204:Core/Src/main.c ****     if (lcd1SelPrevSwitchValue) {
ARM GAS  /tmp/ccRinTmK.s 			page 5


 205:Core/Src/main.c ****       if (lcd1ShowPage < lcd1Pages) { 
 206:Core/Src/main.c ****         lcd1ShowPage ++;
 207:Core/Src/main.c ****       } else {
 208:Core/Src/main.c ****         lcd1ShowPage = 0;
 209:Core/Src/main.c ****       }
 210:Core/Src/main.c ****     } else if (lcd1SelNextSwitchValue) {
 211:Core/Src/main.c ****       if (lcd1ShowPage == 0) { 
 212:Core/Src/main.c ****         lcd1ShowPage = lcd1Pages;
 213:Core/Src/main.c ****       } else {
 214:Core/Src/main.c ****         lcd1ShowPage --;
 215:Core/Src/main.c ****       }
 216:Core/Src/main.c ****     }
 217:Core/Src/main.c ****     
 218:Core/Src/main.c ****     // Display data
 219:Core/Src/main.c ****     if (lcd1ShowPage == 0) {
 220:Core/Src/main.c ****       // Page 1 - Switch positions
 221:Core/Src/main.c ****       sprintf(Test, "Sw; Mn: [%d], Th: [%d], SH: [%d], SL: [%d], L1P: [%d], L1N: [%d]\n\r", mainSwi
 222:Core/Src/main.c ****       HAL_UART_Transmit(&huart2,Test,strlen(Test),1000);  // Sending in normal mode
 223:Core/Src/main.c ****     } else if (lcd1ShowPage == 1) {
 224:Core/Src/main.c ****       // Page 2 - Speed 
 225:Core/Src/main.c ****       if (speedSelect == 2) {
 226:Core/Src/main.c ****         sprintf(Speed, "Turbo speed!\n\r");
 227:Core/Src/main.c ****       } else if (speedSelect == 0) {
 228:Core/Src/main.c ****         sprintf(Speed, "Turtle speed.\n\r");
 229:Core/Src/main.c ****       } else if (speedSelect == 0) {
 230:Core/Src/main.c ****         sprintf(Speed, "Emegergency Stop!\n\r");
 231:Core/Src/main.c ****       } else {
 232:Core/Src/main.c ****         sprintf(Speed, "Normal speed\n\r");
 233:Core/Src/main.c ****       }
 234:Core/Src/main.c ****       HAL_UART_Transmit(&huart2,Speed,strlen(Speed),1000);  // Sending in normal mode
 235:Core/Src/main.c ****     } else if (lcd1ShowPage == 2) {
 236:Core/Src/main.c ****       // Page 3 - ADC and DAC
 237:Core/Src/main.c ****       sprintf(Pots, "ADC; Throttle: [%d], Regen: [%d]\n\r", adcThrottleValue, adcRegenValue);
 238:Core/Src/main.c ****       HAL_UART_Transmit(&huart2,Pots,strlen(Pots),1000);  // Sending in normal mode
 239:Core/Src/main.c ****     }
 240:Core/Src/main.c ****     
 241:Core/Src/main.c ****     HAL_Delay(500);
 242:Core/Src/main.c ****     /* USER CODE END WHILE */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 245:Core/Src/main.c ****   }
 246:Core/Src/main.c ****   /* USER CODE END 3 */
 247:Core/Src/main.c **** }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** // main timer task
 250:Core/Src/main.c **** void main_timer_task(void) {
 251:Core/Src/main.c ****   HAL_GPIO_TogglePin(LCD1_BL_RED_GPIO_Port, LCD1_BL_RED_Pin);
 252:Core/Src/main.c **** }
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** /*
 255:Core/Src/main.c **** void init_LCD()
 256:Core/Src/main.c **** {
 257:Core/Src/main.c ****   I2C_Start(); 
 258:Core/Src/main.c ****   I2C_out(0x7C); 
 259:Core/Src/main.c ****   I2C_out(0x00); 
 260:Core/Src/main.c ****   I2C_out(0x38); 
 261:Core/Src/main.c ****   delay(10); 
ARM GAS  /tmp/ccRinTmK.s 			page 6


 262:Core/Src/main.c ****   I2C_out(0x39); 
 263:Core/Src/main.c ****   delay(10); 
 264:Core/Src/main.c ****   I2C_out(0x14); 
 265:Core/Src/main.c ****   I2C_out(0x78); 
 266:Core/Src/main.c ****   I2C_out(0x5E); 
 267:Core/Src/main.c ****   I2C_out(0x6D); 
 268:Core/Src/main.c ****   I2C_out(0x0C); 
 269:Core/Src/main.c ****   I2C_out(0x01); 
 270:Core/Src/main.c ****   I2C_out(0x06); 
 271:Core/Src/main.c ****   delay(10); 
 272:Core/Src/main.c ****   I2C_stop(); 
 273:Core/Src/main.c **** }
 274:Core/Src/main.c **** */
 275:Core/Src/main.c **** 
 276:Core/Src/main.c **** /**
 277:Core/Src/main.c ****   * @brief System Clock Configuration
 278:Core/Src/main.c ****   * @retval None
 279:Core/Src/main.c ****   */
 280:Core/Src/main.c **** void SystemClock_Config(void)
 281:Core/Src/main.c **** {
 282:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 283:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 284:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 287:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 288:Core/Src/main.c ****   */
 289:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 290:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 291:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 292:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 293:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 294:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 295:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 296:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 297:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 298:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 299:Core/Src/main.c ****   {
 300:Core/Src/main.c ****     Error_Handler();
 301:Core/Src/main.c ****   }
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 304:Core/Src/main.c ****   */
 305:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 306:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 307:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 308:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 309:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 312:Core/Src/main.c ****   {
 313:Core/Src/main.c ****     Error_Handler();
 314:Core/Src/main.c ****   }
 315:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 316:Core/Src/main.c ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 317:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 318:Core/Src/main.c ****   {
ARM GAS  /tmp/ccRinTmK.s 			page 7


 319:Core/Src/main.c ****     Error_Handler();
 320:Core/Src/main.c ****   }
 321:Core/Src/main.c **** }
 322:Core/Src/main.c **** 
 323:Core/Src/main.c **** /**
 324:Core/Src/main.c ****   * @brief ADC Initialization Function
 325:Core/Src/main.c ****   * @param None
 326:Core/Src/main.c ****   * @retval None
 327:Core/Src/main.c ****   */
 328:Core/Src/main.c **** static void MX_ADC_Init(void)
 329:Core/Src/main.c **** {
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 0 */
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****   /* USER CODE END ADC_Init 0 */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 1 */
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   /* USER CODE END ADC_Init 1 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 342:Core/Src/main.c ****   */
 343:Core/Src/main.c ****   hadc.Instance = ADC1;
 344:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 345:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 346:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 347:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 348:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 349:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 350:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 351:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 352:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 353:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 354:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 355:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = ENABLE;
 356:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 357:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 358:Core/Src/main.c ****   {
 359:Core/Src/main.c ****     Error_Handler();
 360:Core/Src/main.c ****   }
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /** Configure for the selected ADC regular channel to be converted.
 363:Core/Src/main.c ****   */
 364:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0; // Throttle Pot
 365:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 366:Core/Src/main.c **** //  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 367:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 368:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 369:Core/Src/main.c ****   {
 370:Core/Src/main.c ****     Error_Handler();
 371:Core/Src/main.c ****   }
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /** Configure for the selected ADC regular channel to be converted.
 374:Core/Src/main.c ****   */
 375:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1; // Regen Pot
ARM GAS  /tmp/ccRinTmK.s 			page 8


 376:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 377:Core/Src/main.c ****   {
 378:Core/Src/main.c ****     Error_Handler();
 379:Core/Src/main.c ****   }
 380:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 2 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /* USER CODE END ADC_Init 2 */
 383:Core/Src/main.c **** 
 384:Core/Src/main.c **** }
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** /**
 387:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 388:Core/Src/main.c ****   * @param None
 389:Core/Src/main.c ****   * @retval None
 390:Core/Src/main.c ****   */
 391:Core/Src/main.c **** static void MX_I2C1_Init(void)
 392:Core/Src/main.c **** {
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 399:Core/Src/main.c **** 
 400:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 401:Core/Src/main.c ****   hi2c_dac.Instance = I2C1;
 402:Core/Src/main.c ****   hi2c_dac.Init.Timing = 0x2010091A;
 403:Core/Src/main.c ****   hi2c_dac.Init.OwnAddress1 = 0;
 404:Core/Src/main.c ****   hi2c_dac.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 405:Core/Src/main.c ****   hi2c_dac.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 406:Core/Src/main.c ****   hi2c_dac.Init.OwnAddress2 = 0;
 407:Core/Src/main.c ****   hi2c_dac.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 408:Core/Src/main.c ****   hi2c_dac.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 409:Core/Src/main.c ****   hi2c_dac.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 410:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c_dac) != HAL_OK)
 411:Core/Src/main.c ****   {
 412:Core/Src/main.c ****     Error_Handler();
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /** Configure Analogue filter
 416:Core/Src/main.c ****   */
 417:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c_dac, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 418:Core/Src/main.c ****   {
 419:Core/Src/main.c ****     Error_Handler();
 420:Core/Src/main.c ****   }
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****   /** Configure Digital filter
 423:Core/Src/main.c ****   */
 424:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c_dac, 0) != HAL_OK)
 425:Core/Src/main.c ****   {
 426:Core/Src/main.c ****     Error_Handler();
 427:Core/Src/main.c ****   }
 428:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 431:Core/Src/main.c **** 
 432:Core/Src/main.c **** }
ARM GAS  /tmp/ccRinTmK.s 			page 9


 433:Core/Src/main.c **** 
 434:Core/Src/main.c **** /**
 435:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 436:Core/Src/main.c ****   * @param None
 437:Core/Src/main.c ****   * @retval None
 438:Core/Src/main.c ****   */
 439:Core/Src/main.c **** static void MX_I2C2_Init(void)
 440:Core/Src/main.c **** {
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 443:Core/Src/main.c **** 
 444:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 445:Core/Src/main.c **** 
 446:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 449:Core/Src/main.c ****   hi2c_lcd.Instance = I2C2;
 450:Core/Src/main.c ****   hi2c_lcd.Init.Timing = 0x2010091A;
 451:Core/Src/main.c ****   hi2c_lcd.Init.OwnAddress1 = 0;
 452:Core/Src/main.c ****   hi2c_lcd.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 453:Core/Src/main.c ****   hi2c_lcd.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 454:Core/Src/main.c ****   hi2c_lcd.Init.OwnAddress2 = 0;
 455:Core/Src/main.c ****   hi2c_lcd.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 456:Core/Src/main.c ****   hi2c_lcd.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 457:Core/Src/main.c ****   hi2c_lcd.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 458:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c_lcd) != HAL_OK)
 459:Core/Src/main.c ****   {
 460:Core/Src/main.c ****     Error_Handler();
 461:Core/Src/main.c ****   }
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /** Configure Analogue filter
 464:Core/Src/main.c ****   */
 465:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c_lcd, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 466:Core/Src/main.c ****   {
 467:Core/Src/main.c ****     Error_Handler();
 468:Core/Src/main.c ****   }
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /** Configure Digital filter
 471:Core/Src/main.c ****   */
 472:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c_lcd, 0) != HAL_OK)
 473:Core/Src/main.c ****   {
 474:Core/Src/main.c ****     Error_Handler();
 475:Core/Src/main.c ****   }
 476:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 477:Core/Src/main.c **** 
 478:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 479:Core/Src/main.c **** 
 480:Core/Src/main.c **** }
 481:Core/Src/main.c **** 
 482:Core/Src/main.c **** /**
 483:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 484:Core/Src/main.c ****   * @param None
 485:Core/Src/main.c ****   * @retval None
 486:Core/Src/main.c ****   */
 487:Core/Src/main.c **** static void MX_TIM1_Init(void)
 488:Core/Src/main.c **** {
 489:Core/Src/main.c **** 
ARM GAS  /tmp/ccRinTmK.s 			page 10


 490:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 491:Core/Src/main.c **** 
 492:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 493:Core/Src/main.c **** 
 494:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 495:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 500:Core/Src/main.c ****   htim1.Instance = TIM1;
 501:Core/Src/main.c ****   htim1.Init.Prescaler = 8;
 502:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 503:Core/Src/main.c ****   htim1.Init.Period = 10000;
 504:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 505:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 506:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 507:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 508:Core/Src/main.c ****   {
 509:Core/Src/main.c ****     Error_Handler();
 510:Core/Src/main.c ****   }
 511:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 512:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 513:Core/Src/main.c ****   {
 514:Core/Src/main.c ****     Error_Handler();
 515:Core/Src/main.c ****   }
 516:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 517:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 518:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 519:Core/Src/main.c ****   {
 520:Core/Src/main.c ****     Error_Handler();
 521:Core/Src/main.c ****   }
 522:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 523:Core/Src/main.c **** 
 524:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 525:Core/Src/main.c **** 
 526:Core/Src/main.c **** }
 527:Core/Src/main.c **** 
 528:Core/Src/main.c **** /**
 529:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 530:Core/Src/main.c ****   * @param None
 531:Core/Src/main.c ****   * @retval None
 532:Core/Src/main.c ****   */
 533:Core/Src/main.c **** static void MX_TIM3_Init(void)
 534:Core/Src/main.c **** {
 535:Core/Src/main.c **** 
 536:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 537:Core/Src/main.c **** 
 538:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 539:Core/Src/main.c **** 
 540:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 541:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 542:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 543:Core/Src/main.c **** 
 544:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 545:Core/Src/main.c **** 
 546:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
ARM GAS  /tmp/ccRinTmK.s 			page 11


 547:Core/Src/main.c ****   htim3.Instance = TIM3;
 548:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 549:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 550:Core/Src/main.c ****   htim3.Init.Period = 65535;
 551:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 552:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 553:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 554:Core/Src/main.c ****   {
 555:Core/Src/main.c ****     Error_Handler();
 556:Core/Src/main.c ****   }
 557:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 558:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 559:Core/Src/main.c ****   {
 560:Core/Src/main.c ****     Error_Handler();
 561:Core/Src/main.c ****   }
 562:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 563:Core/Src/main.c ****   {
 564:Core/Src/main.c ****     Error_Handler();
 565:Core/Src/main.c ****   }
 566:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 567:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 568:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 569:Core/Src/main.c ****   {
 570:Core/Src/main.c ****     Error_Handler();
 571:Core/Src/main.c ****   }
 572:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 573:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 574:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 575:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 576:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 577:Core/Src/main.c ****   {
 578:Core/Src/main.c ****     Error_Handler();
 579:Core/Src/main.c ****   }
 580:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 581:Core/Src/main.c ****   {
 582:Core/Src/main.c ****     Error_Handler();
 583:Core/Src/main.c ****   }
 584:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 585:Core/Src/main.c ****   {
 586:Core/Src/main.c ****     Error_Handler();
 587:Core/Src/main.c ****   }
 588:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 589:Core/Src/main.c **** 
 590:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 591:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 592:Core/Src/main.c **** 
 593:Core/Src/main.c **** }
 594:Core/Src/main.c **** 
 595:Core/Src/main.c **** /**
 596:Core/Src/main.c ****   * @brief USART2 Initialization Function
 597:Core/Src/main.c ****   * @param None
 598:Core/Src/main.c ****   * @retval None
 599:Core/Src/main.c ****   */
 600:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 601:Core/Src/main.c **** {
 602:Core/Src/main.c **** 
 603:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
ARM GAS  /tmp/ccRinTmK.s 			page 12


 604:Core/Src/main.c **** 
 605:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 606:Core/Src/main.c **** 
 607:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 608:Core/Src/main.c **** 
 609:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 610:Core/Src/main.c ****   huart2.Instance = USART2;
 611:Core/Src/main.c ****   huart2.Init.BaudRate = 38400;
 612:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 613:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 614:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 615:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 616:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 617:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 618:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 619:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 620:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 621:Core/Src/main.c ****   {
 622:Core/Src/main.c ****     Error_Handler();
 623:Core/Src/main.c ****   }
 624:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 625:Core/Src/main.c **** 
 626:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 627:Core/Src/main.c **** 
 628:Core/Src/main.c **** }
 629:Core/Src/main.c **** 
 630:Core/Src/main.c **** /**
 631:Core/Src/main.c ****   * Enable DMA controller clock
 632:Core/Src/main.c ****   */
 633:Core/Src/main.c **** static void MX_DMA_Init(void)
 634:Core/Src/main.c **** {
 635:Core/Src/main.c **** 
 636:Core/Src/main.c ****   /* DMA controller clock enable */
 637:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 638:Core/Src/main.c **** 
 639:Core/Src/main.c ****   /* DMA interrupt init */
 640:Core/Src/main.c ****   /* DMA1_Channel1_IRQn interrupt configuration */
 641:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, INT_PRIO_ADC, 0); // For the ADC 
 642:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 643:Core/Src/main.c **** }
 644:Core/Src/main.c **** 
 645:Core/Src/main.c **** /**
 646:Core/Src/main.c ****   * @brief GPIO Initialization Function
 647:Core/Src/main.c ****   * @param None
 648:Core/Src/main.c ****   * @retval None
 649:Core/Src/main.c ****   */
 650:Core/Src/main.c **** static void MX_GPIO_Init(void)
 651:Core/Src/main.c **** {
  26              		.loc 1 651 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 40
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
ARM GAS  /tmp/ccRinTmK.s 			page 13


  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 CE46     		mov	lr, r9
  39 0004 4746     		mov	r7, r8
  40 0006 80B5     		push	{r7, lr}
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 28
  43              		.cfi_offset 8, -28
  44              		.cfi_offset 9, -24
  45 0008 8BB0     		sub	sp, sp, #44
  46              	.LCFI2:
  47              		.cfi_def_cfa_offset 72
 652:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  48              		.loc 1 652 3 view .LVU1
  49              		.loc 1 652 20 is_stmt 0 view .LVU2
  50 000a 1422     		movs	r2, #20
  51 000c 0021     		movs	r1, #0
  52 000e 05A8     		add	r0, sp, #20
  53 0010 FFF7FEFF 		bl	memset
  54              	.LVL0:
 653:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 654:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 655:Core/Src/main.c **** 
 656:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 657:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  55              		.loc 1 657 3 is_stmt 1 view .LVU3
  56              	.LBB4:
  57              		.loc 1 657 3 view .LVU4
  58              		.loc 1 657 3 view .LVU5
  59 0014 544B     		ldr	r3, .L2
  60 0016 5A69     		ldr	r2, [r3, #20]
  61 0018 8021     		movs	r1, #128
  62 001a 8902     		lsls	r1, r1, #10
  63 001c 0A43     		orrs	r2, r1
  64 001e 5A61     		str	r2, [r3, #20]
  65              		.loc 1 657 3 view .LVU6
  66 0020 5A69     		ldr	r2, [r3, #20]
  67 0022 0A40     		ands	r2, r1
  68 0024 0092     		str	r2, [sp]
  69              		.loc 1 657 3 view .LVU7
  70 0026 009A     		ldr	r2, [sp]
  71              	.LBE4:
  72              		.loc 1 657 3 view .LVU8
 658:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  73              		.loc 1 658 3 view .LVU9
  74              	.LBB5:
  75              		.loc 1 658 3 view .LVU10
  76              		.loc 1 658 3 view .LVU11
  77 0028 5A69     		ldr	r2, [r3, #20]
  78 002a 8021     		movs	r1, #128
  79 002c C902     		lsls	r1, r1, #11
  80 002e 0A43     		orrs	r2, r1
  81 0030 5A61     		str	r2, [r3, #20]
  82              		.loc 1 658 3 view .LVU12
  83 0032 5A69     		ldr	r2, [r3, #20]
  84 0034 0A40     		ands	r2, r1
ARM GAS  /tmp/ccRinTmK.s 			page 14


  85 0036 0192     		str	r2, [sp, #4]
  86              		.loc 1 658 3 view .LVU13
  87 0038 019A     		ldr	r2, [sp, #4]
  88              	.LBE5:
  89              		.loc 1 658 3 view .LVU14
 659:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  90              		.loc 1 659 3 view .LVU15
  91              	.LBB6:
  92              		.loc 1 659 3 view .LVU16
  93              		.loc 1 659 3 view .LVU17
  94 003a 5A69     		ldr	r2, [r3, #20]
  95 003c 8021     		movs	r1, #128
  96 003e 0903     		lsls	r1, r1, #12
  97 0040 0A43     		orrs	r2, r1
  98 0042 5A61     		str	r2, [r3, #20]
  99              		.loc 1 659 3 view .LVU18
 100 0044 5A69     		ldr	r2, [r3, #20]
 101 0046 0A40     		ands	r2, r1
 102 0048 0292     		str	r2, [sp, #8]
 103              		.loc 1 659 3 view .LVU19
 104 004a 029A     		ldr	r2, [sp, #8]
 105              	.LBE6:
 106              		.loc 1 659 3 view .LVU20
 660:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 107              		.loc 1 660 3 view .LVU21
 108              	.LBB7:
 109              		.loc 1 660 3 view .LVU22
 110              		.loc 1 660 3 view .LVU23
 111 004c 5A69     		ldr	r2, [r3, #20]
 112 004e 8021     		movs	r1, #128
 113 0050 4903     		lsls	r1, r1, #13
 114 0052 0A43     		orrs	r2, r1
 115 0054 5A61     		str	r2, [r3, #20]
 116              		.loc 1 660 3 view .LVU24
 117 0056 5A69     		ldr	r2, [r3, #20]
 118 0058 0A40     		ands	r2, r1
 119 005a 0392     		str	r2, [sp, #12]
 120              		.loc 1 660 3 view .LVU25
 121 005c 039A     		ldr	r2, [sp, #12]
 122              	.LBE7:
 123              		.loc 1 660 3 view .LVU26
 661:Core/Src/main.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 124              		.loc 1 661 3 view .LVU27
 125              	.LBB8:
 126              		.loc 1 661 3 view .LVU28
 127              		.loc 1 661 3 view .LVU29
 128 005e 5A69     		ldr	r2, [r3, #20]
 129 0060 8021     		movs	r1, #128
 130 0062 C903     		lsls	r1, r1, #15
 131 0064 0A43     		orrs	r2, r1
 132 0066 5A61     		str	r2, [r3, #20]
 133              		.loc 1 661 3 view .LVU30
 134 0068 5B69     		ldr	r3, [r3, #20]
 135 006a 0B40     		ands	r3, r1
 136 006c 0493     		str	r3, [sp, #16]
 137              		.loc 1 661 3 view .LVU31
 138 006e 049B     		ldr	r3, [sp, #16]
ARM GAS  /tmp/ccRinTmK.s 			page 15


 139              	.LBE8:
 140              		.loc 1 661 3 view .LVU32
 662:Core/Src/main.c ****   
 663:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 664:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, DEBUG_0_Pin|DEBUG_1_Pin, GPIO_PIN_RESET);
 141              		.loc 1 664 3 view .LVU33
 142 0070 3E4E     		ldr	r6, .L2+4
 143 0072 0022     		movs	r2, #0
 144 0074 0321     		movs	r1, #3
 145 0076 3000     		movs	r0, r6
 146 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 147              	.LVL1:
 665:Core/Src/main.c **** 
 666:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 667:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, LD2_Pin|FOOT_SW_OUT_Pin|SPEED_HIGH_SW_OUT_Pin|SPEED_LOW_SW_OUT_Pin, GPIO
 148              		.loc 1 667 3 view .LVU34
 149 007c E223     		movs	r3, #226
 150 007e 1B01     		lsls	r3, r3, #4
 151 0080 9946     		mov	r9, r3
 152 0082 9023     		movs	r3, #144
 153 0084 DB05     		lsls	r3, r3, #23
 154 0086 9846     		mov	r8, r3
 155 0088 0022     		movs	r2, #0
 156 008a 4946     		mov	r1, r9
 157 008c 1800     		movs	r0, r3
 158 008e FFF7FEFF 		bl	HAL_GPIO_WritePin
 159              	.LVL2:
 668:Core/Src/main.c **** 
 669:Core/Src/main.c ****   #define LCD1_SELECT_PREV_Pin GPIO_PIN_1
 670:Core/Src/main.c ****   #define LCD1_SELECT_PREV_GPIO_Port GPIOB
 671:Core/Src/main.c ****   #define LCD1_SELECT_NEXT_Pin GPIO_PIN_2
 672:Core/Src/main.c ****   #define LCD1_SELECT_NEXT_GPIO_Port GPIOB
 673:Core/Src/main.c ****   #define LCD1_BL_RED_Pin GPIO_PIN_6
 674:Core/Src/main.c ****   #define LCD1_BL_RED_GPIO_Port GPIOC
 675:Core/Src/main.c ****   #define LCD1_BL_GREEN_Pin GPIO_PIN_7
 676:Core/Src/main.c ****   #define LCD1_BL_GREEN_GPIO_Port GPIOC
 677:Core/Src/main.c ****   #define LCD1_BL_BLUE_Pin GPIO_PIN_8
 678:Core/Src/main.c ****   #define LCD1_BL_BLUE_GPIO_Port GPIOC
 679:Core/Src/main.c **** 
 680:Core/Src/main.c ****   /* TODO: Remove - Testing PB6, PB7 and PB8 (LCD1 Backlight Pins) */
 681:Core/Src/main.c ****   GPIO_InitStruct.Pin   = LCD1_BL_RED_Pin | LCD1_BL_GREEN_Pin | LCD1_BL_BLUE_Pin;
 160              		.loc 1 681 3 view .LVU35
 161              		.loc 1 681 25 is_stmt 0 view .LVU36
 162 0092 E023     		movs	r3, #224
 163 0094 5B00     		lsls	r3, r3, #1
 164 0096 0593     		str	r3, [sp, #20]
 682:Core/Src/main.c ****   GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 165              		.loc 1 682 3 is_stmt 1 view .LVU37
 166              		.loc 1 682 25 is_stmt 0 view .LVU38
 167 0098 B03B     		subs	r3, r3, #176
 168 009a FF3B     		subs	r3, r3, #255
 169 009c 0693     		str	r3, [sp, #24]
 683:Core/Src/main.c ****   GPIO_InitStruct.Pull  = GPIO_NOPULL;
 170              		.loc 1 683 3 is_stmt 1 view .LVU39
 171              		.loc 1 683 25 is_stmt 0 view .LVU40
 172 009e 0024     		movs	r4, #0
 173 00a0 0794     		str	r4, [sp, #28]
ARM GAS  /tmp/ccRinTmK.s 			page 16


 684:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 174              		.loc 1 684 3 is_stmt 1 view .LVU41
 175              		.loc 1 684 25 is_stmt 0 view .LVU42
 176 00a2 0894     		str	r4, [sp, #32]
 685:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 177              		.loc 1 685 3 is_stmt 1 view .LVU43
 178 00a4 05A9     		add	r1, sp, #20
 179 00a6 3000     		movs	r0, r6
 180 00a8 FFF7FEFF 		bl	HAL_GPIO_Init
 181              	.LVL3:
 686:Core/Src/main.c **** 
 687:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 688:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 182              		.loc 1 688 3 view .LVU44
 183              		.loc 1 688 23 is_stmt 0 view .LVU45
 184 00ac 8023     		movs	r3, #128
 185 00ae 9B01     		lsls	r3, r3, #6
 186 00b0 0593     		str	r3, [sp, #20]
 689:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 187              		.loc 1 689 3 is_stmt 1 view .LVU46
 188              		.loc 1 689 24 is_stmt 0 view .LVU47
 189 00b2 8423     		movs	r3, #132
 190 00b4 9B03     		lsls	r3, r3, #14
 191 00b6 0693     		str	r3, [sp, #24]
 690:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 192              		.loc 1 690 3 is_stmt 1 view .LVU48
 193              		.loc 1 690 24 is_stmt 0 view .LVU49
 194 00b8 0794     		str	r4, [sp, #28]
 691:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 195              		.loc 1 691 3 is_stmt 1 view .LVU50
 196 00ba 05A9     		add	r1, sp, #20
 197 00bc 3000     		movs	r0, r6
 198 00be FFF7FEFF 		bl	HAL_GPIO_Init
 199              	.LVL4:
 692:Core/Src/main.c **** 
 693:Core/Src/main.c ****   /*Configure GPIO pins : DEBUG_0_Pin DEBUG_1_Pin */
 694:Core/Src/main.c ****   GPIO_InitStruct.Pin = DEBUG_0_Pin|DEBUG_1_Pin;
 200              		.loc 1 694 3 view .LVU51
 201              		.loc 1 694 23 is_stmt 0 view .LVU52
 202 00c2 0325     		movs	r5, #3
 203 00c4 0595     		str	r5, [sp, #20]
 695:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 204              		.loc 1 695 3 is_stmt 1 view .LVU53
 205              		.loc 1 695 24 is_stmt 0 view .LVU54
 206 00c6 0127     		movs	r7, #1
 207 00c8 0697     		str	r7, [sp, #24]
 696:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 208              		.loc 1 696 3 is_stmt 1 view .LVU55
 209              		.loc 1 696 24 is_stmt 0 view .LVU56
 210 00ca 0794     		str	r4, [sp, #28]
 697:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 211              		.loc 1 697 3 is_stmt 1 view .LVU57
 212              		.loc 1 697 25 is_stmt 0 view .LVU58
 213 00cc 0894     		str	r4, [sp, #32]
 698:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 214              		.loc 1 698 3 is_stmt 1 view .LVU59
 215 00ce 05A9     		add	r1, sp, #20
ARM GAS  /tmp/ccRinTmK.s 			page 17


 216 00d0 3000     		movs	r0, r6
 217 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 218              	.LVL5:
 699:Core/Src/main.c **** 
 700:Core/Src/main.c ****   /*Configure GPIO pins : PC2 PC3 PC4 PC5
 701:Core/Src/main.c ****                            PC9 PC10 PC11 PC12 */
 702:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 219              		.loc 1 702 3 view .LVU60
 220              		.loc 1 702 23 is_stmt 0 view .LVU61
 221 00d6 264B     		ldr	r3, .L2+8
 222 00d8 0593     		str	r3, [sp, #20]
 703:Core/Src/main.c ****                           |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 704:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 223              		.loc 1 704 3 is_stmt 1 view .LVU62
 224              		.loc 1 704 24 is_stmt 0 view .LVU63
 225 00da 0695     		str	r5, [sp, #24]
 705:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 226              		.loc 1 705 3 is_stmt 1 view .LVU64
 227              		.loc 1 705 24 is_stmt 0 view .LVU65
 228 00dc 0794     		str	r4, [sp, #28]
 706:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 229              		.loc 1 706 3 is_stmt 1 view .LVU66
 230 00de 05A9     		add	r1, sp, #20
 231 00e0 3000     		movs	r0, r6
 232 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 233              	.LVL6:
 707:Core/Src/main.c **** 
 708:Core/Src/main.c ****   /*Configure GPIO pins : PF4 PF5 PF6 PF7 */
 709:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 234              		.loc 1 709 3 view .LVU67
 235              		.loc 1 709 23 is_stmt 0 view .LVU68
 236 00e6 F023     		movs	r3, #240
 237 00e8 0593     		str	r3, [sp, #20]
 710:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 238              		.loc 1 710 3 is_stmt 1 view .LVU69
 239              		.loc 1 710 24 is_stmt 0 view .LVU70
 240 00ea 0695     		str	r5, [sp, #24]
 711:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 241              		.loc 1 711 3 is_stmt 1 view .LVU71
 242              		.loc 1 711 24 is_stmt 0 view .LVU72
 243 00ec 0794     		str	r4, [sp, #28]
 712:Core/Src/main.c ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 244              		.loc 1 712 3 is_stmt 1 view .LVU73
 245 00ee 05A9     		add	r1, sp, #20
 246 00f0 2048     		ldr	r0, .L2+12
 247 00f2 FFF7FEFF 		bl	HAL_GPIO_Init
 248              	.LVL7:
 713:Core/Src/main.c **** 
 714:Core/Src/main.c ****   /*Configure GPIO pins : PA12 PA15 */
 715:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 249              		.loc 1 715 3 view .LVU74
 250              		.loc 1 715 23 is_stmt 0 view .LVU75
 251 00f6 9023     		movs	r3, #144
 252 00f8 1B02     		lsls	r3, r3, #8
 253 00fa 0593     		str	r3, [sp, #20]
 716:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 254              		.loc 1 716 3 is_stmt 1 view .LVU76
ARM GAS  /tmp/ccRinTmK.s 			page 18


 255              		.loc 1 716 24 is_stmt 0 view .LVU77
 256 00fc 0695     		str	r5, [sp, #24]
 717:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 257              		.loc 1 717 3 is_stmt 1 view .LVU78
 258              		.loc 1 717 24 is_stmt 0 view .LVU79
 259 00fe 0794     		str	r4, [sp, #28]
 718:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 260              		.loc 1 718 3 is_stmt 1 view .LVU80
 261 0100 05A9     		add	r1, sp, #20
 262 0102 4046     		mov	r0, r8
 263 0104 FFF7FEFF 		bl	HAL_GPIO_Init
 264              	.LVL8:
 719:Core/Src/main.c **** 
 720:Core/Src/main.c ****   /*Configure GPIO pins : LD2_Pin FOOT_SW_OUT_Pin SPEED_HIGH_SW_OUT_Pin SPEED_LOW_SW_OUT_Pin */
 721:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin|FOOT_SW_OUT_Pin|SPEED_HIGH_SW_OUT_Pin|SPEED_LOW_SW_OUT_Pin;
 265              		.loc 1 721 3 view .LVU81
 266              		.loc 1 721 23 is_stmt 0 view .LVU82
 267 0108 4B46     		mov	r3, r9
 268 010a 0593     		str	r3, [sp, #20]
 722:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 269              		.loc 1 722 3 is_stmt 1 view .LVU83
 270              		.loc 1 722 24 is_stmt 0 view .LVU84
 271 010c 0697     		str	r7, [sp, #24]
 723:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 272              		.loc 1 723 3 is_stmt 1 view .LVU85
 273              		.loc 1 723 24 is_stmt 0 view .LVU86
 274 010e 0794     		str	r4, [sp, #28]
 724:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 275              		.loc 1 724 3 is_stmt 1 view .LVU87
 276              		.loc 1 724 25 is_stmt 0 view .LVU88
 277 0110 0894     		str	r4, [sp, #32]
 725:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 278              		.loc 1 725 3 is_stmt 1 view .LVU89
 279 0112 05A9     		add	r1, sp, #20
 280 0114 4046     		mov	r0, r8
 281 0116 FFF7FEFF 		bl	HAL_GPIO_Init
 282              	.LVL9:
 726:Core/Src/main.c **** 
 727:Core/Src/main.c ****   /*Configure GPIO pins : MAIN_SW_IN_Pin | THROTTLE_STOP_SW_IN_Pin SPEED_HIGH_SW_IN_Pin SPEED_LOW_S
 728:Core/Src/main.c ****   GPIO_InitStruct.Pin = MAIN_SW_IN_Pin | THROTTLE_STOP_SW_IN_Pin|SPEED_HIGH_SW_IN_Pin|SPEED_LOW_SW_
 283              		.loc 1 728 3 view .LVU90
 284              		.loc 1 728 23 is_stmt 0 view .LVU91
 285 011a E823     		movs	r3, #232
 286 011c 5B00     		lsls	r3, r3, #1
 287 011e 0593     		str	r3, [sp, #20]
 729:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 288              		.loc 1 729 3 is_stmt 1 view .LVU92
 289              		.loc 1 729 24 is_stmt 0 view .LVU93
 290 0120 0694     		str	r4, [sp, #24]
 730:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 291              		.loc 1 730 3 is_stmt 1 view .LVU94
 292              		.loc 1 730 24 is_stmt 0 view .LVU95
 293 0122 0797     		str	r7, [sp, #28]
 731:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 294              		.loc 1 731 3 is_stmt 1 view .LVU96
 295 0124 05A9     		add	r1, sp, #20
 296 0126 4046     		mov	r0, r8
ARM GAS  /tmp/ccRinTmK.s 			page 19


 297 0128 FFF7FEFF 		bl	HAL_GPIO_Init
 298              	.LVL10:
 732:Core/Src/main.c **** 
 733:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB12 PB13 PB14
 734:Core/Src/main.c ****                            PB15 PB3 PB4 PB5
 735:Core/Src/main.c ****                            PB8 PB9 */
 736:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 299              		.loc 1 736 3 view .LVU97
 300              		.loc 1 736 23 is_stmt 0 view .LVU98
 301 012c 124B     		ldr	r3, .L2+16
 302 012e 0593     		str	r3, [sp, #20]
 737:Core/Src/main.c ****                           |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 738:Core/Src/main.c ****                           |GPIO_PIN_8|GPIO_PIN_9;
 739:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 303              		.loc 1 739 3 is_stmt 1 view .LVU99
 304              		.loc 1 739 24 is_stmt 0 view .LVU100
 305 0130 0695     		str	r5, [sp, #24]
 740:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 306              		.loc 1 740 3 is_stmt 1 view .LVU101
 307              		.loc 1 740 24 is_stmt 0 view .LVU102
 308 0132 0794     		str	r4, [sp, #28]
 741:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 309              		.loc 1 741 3 is_stmt 1 view .LVU103
 310 0134 114E     		ldr	r6, .L2+20
 311 0136 05A9     		add	r1, sp, #20
 312 0138 3000     		movs	r0, r6
 313 013a FFF7FEFF 		bl	HAL_GPIO_Init
 314              	.LVL11:
 742:Core/Src/main.c **** 
 743:Core/Src/main.c ****   /*Configure GPIO pins : LCD1_SELECT_PREV_Pin LCD1_SELECT_NEXT_Pin */
 744:Core/Src/main.c ****   GPIO_InitStruct.Pin = LCD1_SELECT_PREV_Pin|LCD1_SELECT_NEXT_Pin;
 315              		.loc 1 744 3 view .LVU104
 316              		.loc 1 744 23 is_stmt 0 view .LVU105
 317 013e 0623     		movs	r3, #6
 318 0140 0593     		str	r3, [sp, #20]
 745:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 319              		.loc 1 745 3 is_stmt 1 view .LVU106
 320              		.loc 1 745 24 is_stmt 0 view .LVU107
 321 0142 0694     		str	r4, [sp, #24]
 746:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 322              		.loc 1 746 3 is_stmt 1 view .LVU108
 323              		.loc 1 746 24 is_stmt 0 view .LVU109
 324 0144 0797     		str	r7, [sp, #28]
 747:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 325              		.loc 1 747 3 is_stmt 1 view .LVU110
 326 0146 05A9     		add	r1, sp, #20
 327 0148 3000     		movs	r0, r6
 328 014a FFF7FEFF 		bl	HAL_GPIO_Init
 329              	.LVL12:
 748:Core/Src/main.c **** 
 749:Core/Src/main.c ****   /*Configure GPIO pin : PD2 */
 750:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 330              		.loc 1 750 3 view .LVU111
 331              		.loc 1 750 23 is_stmt 0 view .LVU112
 332 014e 0423     		movs	r3, #4
 333 0150 0593     		str	r3, [sp, #20]
 751:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
ARM GAS  /tmp/ccRinTmK.s 			page 20


 334              		.loc 1 751 3 is_stmt 1 view .LVU113
 335              		.loc 1 751 24 is_stmt 0 view .LVU114
 336 0152 0695     		str	r5, [sp, #24]
 752:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 337              		.loc 1 752 3 is_stmt 1 view .LVU115
 338              		.loc 1 752 24 is_stmt 0 view .LVU116
 339 0154 0794     		str	r4, [sp, #28]
 753:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 340              		.loc 1 753 3 is_stmt 1 view .LVU117
 341 0156 05A9     		add	r1, sp, #20
 342 0158 0948     		ldr	r0, .L2+24
 343 015a FFF7FEFF 		bl	HAL_GPIO_Init
 344              	.LVL13:
 754:Core/Src/main.c **** 
 755:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 756:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 757:Core/Src/main.c **** }
 345              		.loc 1 757 1 is_stmt 0 view .LVU118
 346 015e 0BB0     		add	sp, sp, #44
 347              		@ sp needed
 348 0160 C0BC     		pop	{r6, r7}
 349 0162 B946     		mov	r9, r7
 350 0164 B046     		mov	r8, r6
 351 0166 F0BD     		pop	{r4, r5, r6, r7, pc}
 352              	.L3:
 353              		.align	2
 354              	.L2:
 355 0168 00100240 		.word	1073876992
 356 016c 00080048 		.word	1207961600
 357 0170 3C1E0000 		.word	7740
 358 0174 00140048 		.word	1207964672
 359 0178 39F30000 		.word	62265
 360 017c 00040048 		.word	1207960576
 361 0180 000C0048 		.word	1207962624
 362              		.cfi_endproc
 363              	.LFE53:
 365              		.section	.text.MX_DMA_Init,"ax",%progbits
 366              		.align	1
 367              		.syntax unified
 368              		.code	16
 369              		.thumb_func
 371              	MX_DMA_Init:
 372              	.LFB52:
 634:Core/Src/main.c **** 
 373              		.loc 1 634 1 is_stmt 1 view -0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 8
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377 0000 00B5     		push	{lr}
 378              	.LCFI3:
 379              		.cfi_def_cfa_offset 4
 380              		.cfi_offset 14, -4
 381 0002 83B0     		sub	sp, sp, #12
 382              	.LCFI4:
 383              		.cfi_def_cfa_offset 16
 637:Core/Src/main.c **** 
 384              		.loc 1 637 3 view .LVU120
ARM GAS  /tmp/ccRinTmK.s 			page 21


 385              	.LBB9:
 637:Core/Src/main.c **** 
 386              		.loc 1 637 3 view .LVU121
 637:Core/Src/main.c **** 
 387              		.loc 1 637 3 view .LVU122
 388 0004 094A     		ldr	r2, .L5
 389 0006 5169     		ldr	r1, [r2, #20]
 390 0008 0123     		movs	r3, #1
 391 000a 1943     		orrs	r1, r3
 392 000c 5161     		str	r1, [r2, #20]
 637:Core/Src/main.c **** 
 393              		.loc 1 637 3 view .LVU123
 394 000e 5269     		ldr	r2, [r2, #20]
 395 0010 1340     		ands	r3, r2
 396 0012 0193     		str	r3, [sp, #4]
 637:Core/Src/main.c **** 
 397              		.loc 1 637 3 view .LVU124
 398 0014 019B     		ldr	r3, [sp, #4]
 399              	.LBE9:
 637:Core/Src/main.c **** 
 400              		.loc 1 637 3 view .LVU125
 641:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 401              		.loc 1 641 3 view .LVU126
 402 0016 0022     		movs	r2, #0
 403 0018 0721     		movs	r1, #7
 404 001a 0920     		movs	r0, #9
 405 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 406              	.LVL14:
 642:Core/Src/main.c **** }
 407              		.loc 1 642 3 view .LVU127
 408 0020 0920     		movs	r0, #9
 409 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 410              	.LVL15:
 643:Core/Src/main.c **** 
 411              		.loc 1 643 1 is_stmt 0 view .LVU128
 412 0026 03B0     		add	sp, sp, #12
 413              		@ sp needed
 414 0028 00BD     		pop	{pc}
 415              	.L6:
 416 002a C046     		.align	2
 417              	.L5:
 418 002c 00100240 		.word	1073876992
 419              		.cfi_endproc
 420              	.LFE52:
 422              		.section	.text.main_timer_task,"ax",%progbits
 423              		.align	1
 424              		.global	main_timer_task
 425              		.syntax unified
 426              		.code	16
 427              		.thumb_func
 429              	main_timer_task:
 430              	.LFB44:
 250:Core/Src/main.c ****   HAL_GPIO_TogglePin(LCD1_BL_RED_GPIO_Port, LCD1_BL_RED_Pin);
 431              		.loc 1 250 28 is_stmt 1 view -0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccRinTmK.s 			page 22


 435 0000 10B5     		push	{r4, lr}
 436              	.LCFI5:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 4, -8
 439              		.cfi_offset 14, -4
 251:Core/Src/main.c **** }
 440              		.loc 1 251 3 view .LVU130
 441 0002 4021     		movs	r1, #64
 442 0004 0148     		ldr	r0, .L8
 443 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 444              	.LVL16:
 252:Core/Src/main.c **** 
 445              		.loc 1 252 1 is_stmt 0 view .LVU131
 446              		@ sp needed
 447 000a 10BD     		pop	{r4, pc}
 448              	.L9:
 449              		.align	2
 450              	.L8:
 451 000c 00080048 		.word	1207961600
 452              		.cfi_endproc
 453              	.LFE44:
 455              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 456              		.align	1
 457              		.global	HAL_TIM_PeriodElapsedCallback
 458              		.syntax unified
 459              		.code	16
 460              		.thumb_func
 462              	HAL_TIM_PeriodElapsedCallback:
 463              	.LVL17:
 464              	.LFB54:
 758:Core/Src/main.c **** 
 759:Core/Src/main.c **** /**
 760:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 761:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 762:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 763:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 764:Core/Src/main.c ****   * @param  htim : TIM handle
 765:Core/Src/main.c ****   * @retval None
 766:Core/Src/main.c ****   */
 767:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 768:Core/Src/main.c **** {
 465              		.loc 1 768 1 is_stmt 1 view -0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		.loc 1 768 1 is_stmt 0 view .LVU133
 470 0000 10B5     		push	{r4, lr}
 471              	.LCFI6:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 769:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 770:Core/Src/main.c **** 
 771:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 772:Core/Src/main.c ****   if (htim->Instance == TIM1) {
 475              		.loc 1 772 3 is_stmt 1 view .LVU134
 476              		.loc 1 772 11 is_stmt 0 view .LVU135
ARM GAS  /tmp/ccRinTmK.s 			page 23


 477 0002 0268     		ldr	r2, [r0]
 478              		.loc 1 772 6 view .LVU136
 479 0004 034B     		ldr	r3, .L13
 480 0006 9A42     		cmp	r2, r3
 481 0008 00D0     		beq	.L12
 482              	.LVL18:
 483              	.L10:
 773:Core/Src/main.c ****       main_timer_task();
 774:Core/Src/main.c ****   }
 775:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 776:Core/Src/main.c **** 
 777:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 778:Core/Src/main.c **** }
 484              		.loc 1 778 1 view .LVU137
 485              		@ sp needed
 486 000a 10BD     		pop	{r4, pc}
 487              	.LVL19:
 488              	.L12:
 773:Core/Src/main.c ****       main_timer_task();
 489              		.loc 1 773 7 is_stmt 1 view .LVU138
 490 000c FFF7FEFF 		bl	main_timer_task
 491              	.LVL20:
 492              		.loc 1 778 1 is_stmt 0 view .LVU139
 493 0010 FBE7     		b	.L10
 494              	.L14:
 495 0012 C046     		.align	2
 496              	.L13:
 497 0014 002C0140 		.word	1073818624
 498              		.cfi_endproc
 499              	.LFE54:
 501              		.section	.text.Error_Handler,"ax",%progbits
 502              		.align	1
 503              		.global	Error_Handler
 504              		.syntax unified
 505              		.code	16
 506              		.thumb_func
 508              	Error_Handler:
 509              	.LFB55:
 779:Core/Src/main.c **** 
 780:Core/Src/main.c **** 
 781:Core/Src/main.c **** 
 782:Core/Src/main.c **** 
 783:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 784:Core/Src/main.c **** 
 785:Core/Src/main.c **** /* USER CODE END 4 */
 786:Core/Src/main.c **** 
 787:Core/Src/main.c **** /**
 788:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 789:Core/Src/main.c ****   * @retval None
 790:Core/Src/main.c ****   */
 791:Core/Src/main.c **** void Error_Handler(void)
 792:Core/Src/main.c **** {
 510              		.loc 1 792 1 is_stmt 1 view -0
 511              		.cfi_startproc
 512              		@ Volatile: function does not return.
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccRinTmK.s 			page 24


 515              		@ link register save eliminated.
 793:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 794:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 795:Core/Src/main.c ****   __disable_irq();
 516              		.loc 1 795 3 view .LVU141
 517              	.LBB10:
 518              	.LBI10:
 519              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
ARM GAS  /tmp/ccRinTmK.s 			page 25


  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
ARM GAS  /tmp/ccRinTmK.s 			page 26


 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 520              		.loc 2 140 27 view .LVU142
 521              	.LBB11:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 522              		.loc 2 142 3 view .LVU143
 523              		.syntax divided
 524              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 525 0000 72B6     		cpsid i
 526              	@ 0 "" 2
 527              		.thumb
 528              		.syntax unified
 529              	.L16:
 530              	.LBE11:
 531              	.LBE10:
 796:Core/Src/main.c ****   while (1)
 532              		.loc 1 796 3 view .LVU144
 797:Core/Src/main.c ****   {
 798:Core/Src/main.c ****   }
 533              		.loc 1 798 3 view .LVU145
 796:Core/Src/main.c ****   while (1)
 534              		.loc 1 796 9 view .LVU146
 535 0002 FEE7     		b	.L16
 536              		.cfi_endproc
ARM GAS  /tmp/ccRinTmK.s 			page 27


 537              	.LFE55:
 539              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 540              		.align	1
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 545              	MX_USART2_UART_Init:
 546              	.LFB51:
 601:Core/Src/main.c **** 
 547              		.loc 1 601 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 10B5     		push	{r4, lr}
 552              	.LCFI7:
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 4, -8
 555              		.cfi_offset 14, -4
 610:Core/Src/main.c ****   huart2.Init.BaudRate = 38400;
 556              		.loc 1 610 3 view .LVU148
 610:Core/Src/main.c ****   huart2.Init.BaudRate = 38400;
 557              		.loc 1 610 19 is_stmt 0 view .LVU149
 558 0002 0B48     		ldr	r0, .L20
 559 0004 0B4B     		ldr	r3, .L20+4
 560 0006 0360     		str	r3, [r0]
 611:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 561              		.loc 1 611 3 is_stmt 1 view .LVU150
 611:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 562              		.loc 1 611 24 is_stmt 0 view .LVU151
 563 0008 9623     		movs	r3, #150
 564 000a 1B02     		lsls	r3, r3, #8
 565 000c 4360     		str	r3, [r0, #4]
 612:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 566              		.loc 1 612 3 is_stmt 1 view .LVU152
 612:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 567              		.loc 1 612 26 is_stmt 0 view .LVU153
 568 000e 0023     		movs	r3, #0
 569 0010 8360     		str	r3, [r0, #8]
 613:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 570              		.loc 1 613 3 is_stmt 1 view .LVU154
 613:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 571              		.loc 1 613 24 is_stmt 0 view .LVU155
 572 0012 C360     		str	r3, [r0, #12]
 614:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 573              		.loc 1 614 3 is_stmt 1 view .LVU156
 614:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 574              		.loc 1 614 22 is_stmt 0 view .LVU157
 575 0014 0361     		str	r3, [r0, #16]
 615:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 576              		.loc 1 615 3 is_stmt 1 view .LVU158
 615:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 577              		.loc 1 615 20 is_stmt 0 view .LVU159
 578 0016 0C22     		movs	r2, #12
 579 0018 4261     		str	r2, [r0, #20]
 616:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 580              		.loc 1 616 3 is_stmt 1 view .LVU160
 616:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  /tmp/ccRinTmK.s 			page 28


 581              		.loc 1 616 25 is_stmt 0 view .LVU161
 582 001a 8361     		str	r3, [r0, #24]
 617:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 583              		.loc 1 617 3 is_stmt 1 view .LVU162
 617:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 584              		.loc 1 617 28 is_stmt 0 view .LVU163
 585 001c C361     		str	r3, [r0, #28]
 618:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 586              		.loc 1 618 3 is_stmt 1 view .LVU164
 618:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 587              		.loc 1 618 30 is_stmt 0 view .LVU165
 588 001e 0362     		str	r3, [r0, #32]
 619:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 589              		.loc 1 619 3 is_stmt 1 view .LVU166
 619:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 590              		.loc 1 619 38 is_stmt 0 view .LVU167
 591 0020 4362     		str	r3, [r0, #36]
 620:Core/Src/main.c ****   {
 592              		.loc 1 620 3 is_stmt 1 view .LVU168
 620:Core/Src/main.c ****   {
 593              		.loc 1 620 7 is_stmt 0 view .LVU169
 594 0022 FFF7FEFF 		bl	HAL_UART_Init
 595              	.LVL21:
 620:Core/Src/main.c ****   {
 596              		.loc 1 620 6 discriminator 1 view .LVU170
 597 0026 0028     		cmp	r0, #0
 598 0028 00D1     		bne	.L19
 628:Core/Src/main.c **** 
 599              		.loc 1 628 1 view .LVU171
 600              		@ sp needed
 601 002a 10BD     		pop	{r4, pc}
 602              	.L19:
 622:Core/Src/main.c ****   }
 603              		.loc 1 622 5 is_stmt 1 view .LVU172
 604 002c FFF7FEFF 		bl	Error_Handler
 605              	.LVL22:
 606              	.L21:
 607              		.align	2
 608              	.L20:
 609 0030 00000000 		.word	huart2
 610 0034 00440040 		.word	1073759232
 611              		.cfi_endproc
 612              	.LFE51:
 614              		.section	.text.MX_ADC_Init,"ax",%progbits
 615              		.align	1
 616              		.syntax unified
 617              		.code	16
 618              		.thumb_func
 620              	MX_ADC_Init:
 621              	.LFB46:
 329:Core/Src/main.c **** 
 622              		.loc 1 329 1 view -0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 16
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626 0000 00B5     		push	{lr}
 627              	.LCFI8:
ARM GAS  /tmp/ccRinTmK.s 			page 29


 628              		.cfi_def_cfa_offset 4
 629              		.cfi_offset 14, -4
 630 0002 85B0     		sub	sp, sp, #20
 631              	.LCFI9:
 632              		.cfi_def_cfa_offset 24
 335:Core/Src/main.c **** 
 633              		.loc 1 335 3 view .LVU174
 335:Core/Src/main.c **** 
 634              		.loc 1 335 26 is_stmt 0 view .LVU175
 635 0004 0C22     		movs	r2, #12
 636 0006 0021     		movs	r1, #0
 637 0008 01A8     		add	r0, sp, #4
 638 000a FFF7FEFF 		bl	memset
 639              	.LVL23:
 343:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 640              		.loc 1 343 3 is_stmt 1 view .LVU176
 343:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 641              		.loc 1 343 17 is_stmt 0 view .LVU177
 642 000e 1B48     		ldr	r0, .L29
 643 0010 1B4B     		ldr	r3, .L29+4
 644 0012 0360     		str	r3, [r0]
 344:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 645              		.loc 1 344 3 is_stmt 1 view .LVU178
 344:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 646              		.loc 1 344 28 is_stmt 0 view .LVU179
 647 0014 0023     		movs	r3, #0
 648 0016 4360     		str	r3, [r0, #4]
 345:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 649              		.loc 1 345 3 is_stmt 1 view .LVU180
 345:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 650              		.loc 1 345 24 is_stmt 0 view .LVU181
 651 0018 8360     		str	r3, [r0, #8]
 346:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 652              		.loc 1 346 3 is_stmt 1 view .LVU182
 346:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 653              		.loc 1 346 23 is_stmt 0 view .LVU183
 654 001a C360     		str	r3, [r0, #12]
 347:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 655              		.loc 1 347 3 is_stmt 1 view .LVU184
 347:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 656              		.loc 1 347 26 is_stmt 0 view .LVU185
 657 001c 0122     		movs	r2, #1
 658 001e 0261     		str	r2, [r0, #16]
 348:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 659              		.loc 1 348 3 is_stmt 1 view .LVU186
 348:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 660              		.loc 1 348 26 is_stmt 0 view .LVU187
 661 0020 0821     		movs	r1, #8
 662 0022 4161     		str	r1, [r0, #20]
 349:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 663              		.loc 1 349 3 is_stmt 1 view .LVU188
 349:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 664              		.loc 1 349 30 is_stmt 0 view .LVU189
 665 0024 0376     		strb	r3, [r0, #24]
 350:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 666              		.loc 1 350 3 is_stmt 1 view .LVU190
 350:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
ARM GAS  /tmp/ccRinTmK.s 			page 30


 667              		.loc 1 350 34 is_stmt 0 view .LVU191
 668 0026 4376     		strb	r3, [r0, #25]
 351:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 669              		.loc 1 351 3 is_stmt 1 view .LVU192
 351:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 670              		.loc 1 351 32 is_stmt 0 view .LVU193
 671 0028 8276     		strb	r2, [r0, #26]
 352:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 672              		.loc 1 352 3 is_stmt 1 view .LVU194
 352:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 673              		.loc 1 352 35 is_stmt 0 view .LVU195
 674 002a C376     		strb	r3, [r0, #27]
 353:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 675              		.loc 1 353 3 is_stmt 1 view .LVU196
 353:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 676              		.loc 1 353 30 is_stmt 0 view .LVU197
 677 002c C221     		movs	r1, #194
 678 002e FF31     		adds	r1, r1, #255
 679 0030 C161     		str	r1, [r0, #28]
 354:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = ENABLE;
 680              		.loc 1 354 3 is_stmt 1 view .LVU198
 354:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = ENABLE;
 681              		.loc 1 354 34 is_stmt 0 view .LVU199
 682 0032 0362     		str	r3, [r0, #32]
 355:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 683              		.loc 1 355 3 is_stmt 1 view .LVU200
 355:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 684              		.loc 1 355 35 is_stmt 0 view .LVU201
 685 0034 2433     		adds	r3, r3, #36
 686 0036 C254     		strb	r2, [r0, r3]
 356:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 687              		.loc 1 356 3 is_stmt 1 view .LVU202
 356:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 688              		.loc 1 356 21 is_stmt 0 view .LVU203
 689 0038 8262     		str	r2, [r0, #40]
 357:Core/Src/main.c ****   {
 690              		.loc 1 357 3 is_stmt 1 view .LVU204
 357:Core/Src/main.c ****   {
 691              		.loc 1 357 7 is_stmt 0 view .LVU205
 692 003a FFF7FEFF 		bl	HAL_ADC_Init
 693              	.LVL24:
 357:Core/Src/main.c ****   {
 694              		.loc 1 357 6 discriminator 1 view .LVU206
 695 003e 0028     		cmp	r0, #0
 696 0040 16D1     		bne	.L26
 364:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 697              		.loc 1 364 3 is_stmt 1 view .LVU207
 364:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 698              		.loc 1 364 19 is_stmt 0 view .LVU208
 699 0042 0023     		movs	r3, #0
 700 0044 0193     		str	r3, [sp, #4]
 365:Core/Src/main.c **** //  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 701              		.loc 1 365 3 is_stmt 1 view .LVU209
 365:Core/Src/main.c **** //  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 702              		.loc 1 365 16 is_stmt 0 view .LVU210
 703 0046 8023     		movs	r3, #128
 704 0048 5B01     		lsls	r3, r3, #5
ARM GAS  /tmp/ccRinTmK.s 			page 31


 705 004a 0293     		str	r3, [sp, #8]
 367:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 706              		.loc 1 367 3 is_stmt 1 view .LVU211
 367:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 707              		.loc 1 367 24 is_stmt 0 view .LVU212
 708 004c 0623     		movs	r3, #6
 709 004e 0393     		str	r3, [sp, #12]
 368:Core/Src/main.c ****   {
 710              		.loc 1 368 3 is_stmt 1 view .LVU213
 368:Core/Src/main.c ****   {
 711              		.loc 1 368 7 is_stmt 0 view .LVU214
 712 0050 0A48     		ldr	r0, .L29
 713 0052 01A9     		add	r1, sp, #4
 714 0054 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 715              	.LVL25:
 368:Core/Src/main.c ****   {
 716              		.loc 1 368 6 discriminator 1 view .LVU215
 717 0058 0028     		cmp	r0, #0
 718 005a 0BD1     		bne	.L27
 375:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 719              		.loc 1 375 3 is_stmt 1 view .LVU216
 375:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 720              		.loc 1 375 19 is_stmt 0 view .LVU217
 721 005c 0123     		movs	r3, #1
 722 005e 0193     		str	r3, [sp, #4]
 376:Core/Src/main.c ****   {
 723              		.loc 1 376 3 is_stmt 1 view .LVU218
 376:Core/Src/main.c ****   {
 724              		.loc 1 376 7 is_stmt 0 view .LVU219
 725 0060 0648     		ldr	r0, .L29
 726 0062 01A9     		add	r1, sp, #4
 727 0064 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 728              	.LVL26:
 376:Core/Src/main.c ****   {
 729              		.loc 1 376 6 discriminator 1 view .LVU220
 730 0068 0028     		cmp	r0, #0
 731 006a 05D1     		bne	.L28
 384:Core/Src/main.c **** 
 732              		.loc 1 384 1 view .LVU221
 733 006c 05B0     		add	sp, sp, #20
 734              		@ sp needed
 735 006e 00BD     		pop	{pc}
 736              	.L26:
 359:Core/Src/main.c ****   }
 737              		.loc 1 359 5 is_stmt 1 view .LVU222
 738 0070 FFF7FEFF 		bl	Error_Handler
 739              	.LVL27:
 740              	.L27:
 370:Core/Src/main.c ****   }
 741              		.loc 1 370 5 view .LVU223
 742 0074 FFF7FEFF 		bl	Error_Handler
 743              	.LVL28:
 744              	.L28:
 378:Core/Src/main.c ****   }
 745              		.loc 1 378 5 view .LVU224
 746 0078 FFF7FEFF 		bl	Error_Handler
 747              	.LVL29:
ARM GAS  /tmp/ccRinTmK.s 			page 32


 748              	.L30:
 749              		.align	2
 750              	.L29:
 751 007c 00000000 		.word	hadc
 752 0080 00240140 		.word	1073816576
 753              		.cfi_endproc
 754              	.LFE46:
 756              		.section	.text.MX_I2C1_Init,"ax",%progbits
 757              		.align	1
 758              		.syntax unified
 759              		.code	16
 760              		.thumb_func
 762              	MX_I2C1_Init:
 763              	.LFB47:
 392:Core/Src/main.c **** 
 764              		.loc 1 392 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768 0000 10B5     		push	{r4, lr}
 769              	.LCFI10:
 770              		.cfi_def_cfa_offset 8
 771              		.cfi_offset 4, -8
 772              		.cfi_offset 14, -4
 401:Core/Src/main.c ****   hi2c_dac.Init.Timing = 0x2010091A;
 773              		.loc 1 401 3 view .LVU226
 401:Core/Src/main.c ****   hi2c_dac.Init.Timing = 0x2010091A;
 774              		.loc 1 401 21 is_stmt 0 view .LVU227
 775 0002 1248     		ldr	r0, .L38
 776 0004 124B     		ldr	r3, .L38+4
 777 0006 0360     		str	r3, [r0]
 402:Core/Src/main.c ****   hi2c_dac.Init.OwnAddress1 = 0;
 778              		.loc 1 402 3 is_stmt 1 view .LVU228
 402:Core/Src/main.c ****   hi2c_dac.Init.OwnAddress1 = 0;
 779              		.loc 1 402 24 is_stmt 0 view .LVU229
 780 0008 124B     		ldr	r3, .L38+8
 781 000a 4360     		str	r3, [r0, #4]
 403:Core/Src/main.c ****   hi2c_dac.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 782              		.loc 1 403 3 is_stmt 1 view .LVU230
 403:Core/Src/main.c ****   hi2c_dac.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 783              		.loc 1 403 29 is_stmt 0 view .LVU231
 784 000c 0023     		movs	r3, #0
 785 000e 8360     		str	r3, [r0, #8]
 404:Core/Src/main.c ****   hi2c_dac.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 786              		.loc 1 404 3 is_stmt 1 view .LVU232
 404:Core/Src/main.c ****   hi2c_dac.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 787              		.loc 1 404 32 is_stmt 0 view .LVU233
 788 0010 0122     		movs	r2, #1
 789 0012 C260     		str	r2, [r0, #12]
 405:Core/Src/main.c ****   hi2c_dac.Init.OwnAddress2 = 0;
 790              		.loc 1 405 3 is_stmt 1 view .LVU234
 405:Core/Src/main.c ****   hi2c_dac.Init.OwnAddress2 = 0;
 791              		.loc 1 405 33 is_stmt 0 view .LVU235
 792 0014 0361     		str	r3, [r0, #16]
 406:Core/Src/main.c ****   hi2c_dac.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 793              		.loc 1 406 3 is_stmt 1 view .LVU236
 406:Core/Src/main.c ****   hi2c_dac.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
ARM GAS  /tmp/ccRinTmK.s 			page 33


 794              		.loc 1 406 29 is_stmt 0 view .LVU237
 795 0016 4361     		str	r3, [r0, #20]
 407:Core/Src/main.c ****   hi2c_dac.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 796              		.loc 1 407 3 is_stmt 1 view .LVU238
 407:Core/Src/main.c ****   hi2c_dac.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 797              		.loc 1 407 34 is_stmt 0 view .LVU239
 798 0018 8361     		str	r3, [r0, #24]
 408:Core/Src/main.c ****   hi2c_dac.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 799              		.loc 1 408 3 is_stmt 1 view .LVU240
 408:Core/Src/main.c ****   hi2c_dac.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800              		.loc 1 408 33 is_stmt 0 view .LVU241
 801 001a C361     		str	r3, [r0, #28]
 409:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c_dac) != HAL_OK)
 802              		.loc 1 409 3 is_stmt 1 view .LVU242
 409:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c_dac) != HAL_OK)
 803              		.loc 1 409 31 is_stmt 0 view .LVU243
 804 001c 0362     		str	r3, [r0, #32]
 410:Core/Src/main.c ****   {
 805              		.loc 1 410 3 is_stmt 1 view .LVU244
 410:Core/Src/main.c ****   {
 806              		.loc 1 410 7 is_stmt 0 view .LVU245
 807 001e FFF7FEFF 		bl	HAL_I2C_Init
 808              	.LVL30:
 410:Core/Src/main.c ****   {
 809              		.loc 1 410 6 discriminator 1 view .LVU246
 810 0022 0028     		cmp	r0, #0
 811 0024 0CD1     		bne	.L35
 417:Core/Src/main.c ****   {
 812              		.loc 1 417 3 is_stmt 1 view .LVU247
 417:Core/Src/main.c ****   {
 813              		.loc 1 417 7 is_stmt 0 view .LVU248
 814 0026 0948     		ldr	r0, .L38
 815 0028 0021     		movs	r1, #0
 816 002a FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 817              	.LVL31:
 417:Core/Src/main.c ****   {
 818              		.loc 1 417 6 discriminator 1 view .LVU249
 819 002e 0028     		cmp	r0, #0
 820 0030 08D1     		bne	.L36
 424:Core/Src/main.c ****   {
 821              		.loc 1 424 3 is_stmt 1 view .LVU250
 424:Core/Src/main.c ****   {
 822              		.loc 1 424 7 is_stmt 0 view .LVU251
 823 0032 0648     		ldr	r0, .L38
 824 0034 0021     		movs	r1, #0
 825 0036 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 826              	.LVL32:
 424:Core/Src/main.c ****   {
 827              		.loc 1 424 6 discriminator 1 view .LVU252
 828 003a 0028     		cmp	r0, #0
 829 003c 04D1     		bne	.L37
 432:Core/Src/main.c **** 
 830              		.loc 1 432 1 view .LVU253
 831              		@ sp needed
 832 003e 10BD     		pop	{r4, pc}
 833              	.L35:
 412:Core/Src/main.c ****   }
ARM GAS  /tmp/ccRinTmK.s 			page 34


 834              		.loc 1 412 5 is_stmt 1 view .LVU254
 835 0040 FFF7FEFF 		bl	Error_Handler
 836              	.LVL33:
 837              	.L36:
 419:Core/Src/main.c ****   }
 838              		.loc 1 419 5 view .LVU255
 839 0044 FFF7FEFF 		bl	Error_Handler
 840              	.LVL34:
 841              	.L37:
 426:Core/Src/main.c ****   }
 842              		.loc 1 426 5 view .LVU256
 843 0048 FFF7FEFF 		bl	Error_Handler
 844              	.LVL35:
 845              	.L39:
 846              		.align	2
 847              	.L38:
 848 004c 00000000 		.word	hi2c_dac
 849 0050 00540040 		.word	1073763328
 850 0054 1A091020 		.word	537921818
 851              		.cfi_endproc
 852              	.LFE47:
 854              		.section	.text.MX_I2C2_Init,"ax",%progbits
 855              		.align	1
 856              		.syntax unified
 857              		.code	16
 858              		.thumb_func
 860              	MX_I2C2_Init:
 861              	.LFB48:
 440:Core/Src/main.c **** 
 862              		.loc 1 440 1 view -0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866 0000 10B5     		push	{r4, lr}
 867              	.LCFI11:
 868              		.cfi_def_cfa_offset 8
 869              		.cfi_offset 4, -8
 870              		.cfi_offset 14, -4
 449:Core/Src/main.c ****   hi2c_lcd.Init.Timing = 0x2010091A;
 871              		.loc 1 449 3 view .LVU258
 449:Core/Src/main.c ****   hi2c_lcd.Init.Timing = 0x2010091A;
 872              		.loc 1 449 21 is_stmt 0 view .LVU259
 873 0002 1248     		ldr	r0, .L47
 874 0004 124B     		ldr	r3, .L47+4
 875 0006 0360     		str	r3, [r0]
 450:Core/Src/main.c ****   hi2c_lcd.Init.OwnAddress1 = 0;
 876              		.loc 1 450 3 is_stmt 1 view .LVU260
 450:Core/Src/main.c ****   hi2c_lcd.Init.OwnAddress1 = 0;
 877              		.loc 1 450 24 is_stmt 0 view .LVU261
 878 0008 124B     		ldr	r3, .L47+8
 879 000a 4360     		str	r3, [r0, #4]
 451:Core/Src/main.c ****   hi2c_lcd.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 880              		.loc 1 451 3 is_stmt 1 view .LVU262
 451:Core/Src/main.c ****   hi2c_lcd.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 881              		.loc 1 451 29 is_stmt 0 view .LVU263
 882 000c 0023     		movs	r3, #0
 883 000e 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccRinTmK.s 			page 35


 452:Core/Src/main.c ****   hi2c_lcd.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 884              		.loc 1 452 3 is_stmt 1 view .LVU264
 452:Core/Src/main.c ****   hi2c_lcd.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 885              		.loc 1 452 32 is_stmt 0 view .LVU265
 886 0010 0122     		movs	r2, #1
 887 0012 C260     		str	r2, [r0, #12]
 453:Core/Src/main.c ****   hi2c_lcd.Init.OwnAddress2 = 0;
 888              		.loc 1 453 3 is_stmt 1 view .LVU266
 453:Core/Src/main.c ****   hi2c_lcd.Init.OwnAddress2 = 0;
 889              		.loc 1 453 33 is_stmt 0 view .LVU267
 890 0014 0361     		str	r3, [r0, #16]
 454:Core/Src/main.c ****   hi2c_lcd.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 891              		.loc 1 454 3 is_stmt 1 view .LVU268
 454:Core/Src/main.c ****   hi2c_lcd.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 892              		.loc 1 454 29 is_stmt 0 view .LVU269
 893 0016 4361     		str	r3, [r0, #20]
 455:Core/Src/main.c ****   hi2c_lcd.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 894              		.loc 1 455 3 is_stmt 1 view .LVU270
 455:Core/Src/main.c ****   hi2c_lcd.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 895              		.loc 1 455 34 is_stmt 0 view .LVU271
 896 0018 8361     		str	r3, [r0, #24]
 456:Core/Src/main.c ****   hi2c_lcd.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 897              		.loc 1 456 3 is_stmt 1 view .LVU272
 456:Core/Src/main.c ****   hi2c_lcd.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 898              		.loc 1 456 33 is_stmt 0 view .LVU273
 899 001a C361     		str	r3, [r0, #28]
 457:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c_lcd) != HAL_OK)
 900              		.loc 1 457 3 is_stmt 1 view .LVU274
 457:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c_lcd) != HAL_OK)
 901              		.loc 1 457 31 is_stmt 0 view .LVU275
 902 001c 0362     		str	r3, [r0, #32]
 458:Core/Src/main.c ****   {
 903              		.loc 1 458 3 is_stmt 1 view .LVU276
 458:Core/Src/main.c ****   {
 904              		.loc 1 458 7 is_stmt 0 view .LVU277
 905 001e FFF7FEFF 		bl	HAL_I2C_Init
 906              	.LVL36:
 458:Core/Src/main.c ****   {
 907              		.loc 1 458 6 discriminator 1 view .LVU278
 908 0022 0028     		cmp	r0, #0
 909 0024 0CD1     		bne	.L44
 465:Core/Src/main.c ****   {
 910              		.loc 1 465 3 is_stmt 1 view .LVU279
 465:Core/Src/main.c ****   {
 911              		.loc 1 465 7 is_stmt 0 view .LVU280
 912 0026 0948     		ldr	r0, .L47
 913 0028 0021     		movs	r1, #0
 914 002a FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 915              	.LVL37:
 465:Core/Src/main.c ****   {
 916              		.loc 1 465 6 discriminator 1 view .LVU281
 917 002e 0028     		cmp	r0, #0
 918 0030 08D1     		bne	.L45
 472:Core/Src/main.c ****   {
 919              		.loc 1 472 3 is_stmt 1 view .LVU282
 472:Core/Src/main.c ****   {
 920              		.loc 1 472 7 is_stmt 0 view .LVU283
ARM GAS  /tmp/ccRinTmK.s 			page 36


 921 0032 0648     		ldr	r0, .L47
 922 0034 0021     		movs	r1, #0
 923 0036 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 924              	.LVL38:
 472:Core/Src/main.c ****   {
 925              		.loc 1 472 6 discriminator 1 view .LVU284
 926 003a 0028     		cmp	r0, #0
 927 003c 04D1     		bne	.L46
 480:Core/Src/main.c **** 
 928              		.loc 1 480 1 view .LVU285
 929              		@ sp needed
 930 003e 10BD     		pop	{r4, pc}
 931              	.L44:
 460:Core/Src/main.c ****   }
 932              		.loc 1 460 5 is_stmt 1 view .LVU286
 933 0040 FFF7FEFF 		bl	Error_Handler
 934              	.LVL39:
 935              	.L45:
 467:Core/Src/main.c ****   }
 936              		.loc 1 467 5 view .LVU287
 937 0044 FFF7FEFF 		bl	Error_Handler
 938              	.LVL40:
 939              	.L46:
 474:Core/Src/main.c ****   }
 940              		.loc 1 474 5 view .LVU288
 941 0048 FFF7FEFF 		bl	Error_Handler
 942              	.LVL41:
 943              	.L48:
 944              		.align	2
 945              	.L47:
 946 004c 00000000 		.word	hi2c_lcd
 947 0050 00580040 		.word	1073764352
 948 0054 1A091020 		.word	537921818
 949              		.cfi_endproc
 950              	.LFE48:
 952              		.section	.text.MX_TIM1_Init,"ax",%progbits
 953              		.align	1
 954              		.syntax unified
 955              		.code	16
 956              		.thumb_func
 958              	MX_TIM1_Init:
 959              	.LFB49:
 488:Core/Src/main.c **** 
 960              		.loc 1 488 1 view -0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 24
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964 0000 00B5     		push	{lr}
 965              	.LCFI12:
 966              		.cfi_def_cfa_offset 4
 967              		.cfi_offset 14, -4
 968 0002 87B0     		sub	sp, sp, #28
 969              	.LCFI13:
 970              		.cfi_def_cfa_offset 32
 494:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 971              		.loc 1 494 3 view .LVU290
 494:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/ccRinTmK.s 			page 37


 972              		.loc 1 494 26 is_stmt 0 view .LVU291
 973 0004 1022     		movs	r2, #16
 974 0006 0021     		movs	r1, #0
 975 0008 02A8     		add	r0, sp, #8
 976 000a FFF7FEFF 		bl	memset
 977              	.LVL42:
 495:Core/Src/main.c **** 
 978              		.loc 1 495 3 is_stmt 1 view .LVU292
 495:Core/Src/main.c **** 
 979              		.loc 1 495 27 is_stmt 0 view .LVU293
 980 000e 0822     		movs	r2, #8
 981 0010 0021     		movs	r1, #0
 982 0012 6846     		mov	r0, sp
 983 0014 FFF7FEFF 		bl	memset
 984              	.LVL43:
 500:Core/Src/main.c ****   htim1.Init.Prescaler = 8;
 985              		.loc 1 500 3 is_stmt 1 view .LVU294
 500:Core/Src/main.c ****   htim1.Init.Prescaler = 8;
 986              		.loc 1 500 18 is_stmt 0 view .LVU295
 987 0018 1448     		ldr	r0, .L56
 988 001a 154B     		ldr	r3, .L56+4
 989 001c 0360     		str	r3, [r0]
 501:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 990              		.loc 1 501 3 is_stmt 1 view .LVU296
 501:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 991              		.loc 1 501 24 is_stmt 0 view .LVU297
 992 001e 0823     		movs	r3, #8
 993 0020 4360     		str	r3, [r0, #4]
 502:Core/Src/main.c ****   htim1.Init.Period = 10000;
 994              		.loc 1 502 3 is_stmt 1 view .LVU298
 502:Core/Src/main.c ****   htim1.Init.Period = 10000;
 995              		.loc 1 502 26 is_stmt 0 view .LVU299
 996 0022 0023     		movs	r3, #0
 997 0024 8360     		str	r3, [r0, #8]
 503:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 998              		.loc 1 503 3 is_stmt 1 view .LVU300
 503:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 999              		.loc 1 503 21 is_stmt 0 view .LVU301
 1000 0026 134A     		ldr	r2, .L56+8
 1001 0028 C260     		str	r2, [r0, #12]
 504:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1002              		.loc 1 504 3 is_stmt 1 view .LVU302
 504:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1003              		.loc 1 504 28 is_stmt 0 view .LVU303
 1004 002a 0361     		str	r3, [r0, #16]
 505:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1005              		.loc 1 505 3 is_stmt 1 view .LVU304
 505:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1006              		.loc 1 505 32 is_stmt 0 view .LVU305
 1007 002c 4361     		str	r3, [r0, #20]
 506:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1008              		.loc 1 506 3 is_stmt 1 view .LVU306
 506:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1009              		.loc 1 506 32 is_stmt 0 view .LVU307
 1010 002e 8361     		str	r3, [r0, #24]
 507:Core/Src/main.c ****   {
 1011              		.loc 1 507 3 is_stmt 1 view .LVU308
ARM GAS  /tmp/ccRinTmK.s 			page 38


 507:Core/Src/main.c ****   {
 1012              		.loc 1 507 7 is_stmt 0 view .LVU309
 1013 0030 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1014              	.LVL44:
 507:Core/Src/main.c ****   {
 1015              		.loc 1 507 6 discriminator 1 view .LVU310
 1016 0034 0028     		cmp	r0, #0
 1017 0036 13D1     		bne	.L53
 511:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1018              		.loc 1 511 3 is_stmt 1 view .LVU311
 511:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1019              		.loc 1 511 34 is_stmt 0 view .LVU312
 1020 0038 8023     		movs	r3, #128
 1021 003a 5B01     		lsls	r3, r3, #5
 1022 003c 0293     		str	r3, [sp, #8]
 512:Core/Src/main.c ****   {
 1023              		.loc 1 512 3 is_stmt 1 view .LVU313
 512:Core/Src/main.c ****   {
 1024              		.loc 1 512 7 is_stmt 0 view .LVU314
 1025 003e 0B48     		ldr	r0, .L56
 1026 0040 02A9     		add	r1, sp, #8
 1027 0042 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1028              	.LVL45:
 512:Core/Src/main.c ****   {
 1029              		.loc 1 512 6 discriminator 1 view .LVU315
 1030 0046 0028     		cmp	r0, #0
 1031 0048 0CD1     		bne	.L54
 516:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1032              		.loc 1 516 3 is_stmt 1 view .LVU316
 516:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1033              		.loc 1 516 37 is_stmt 0 view .LVU317
 1034 004a 0023     		movs	r3, #0
 1035 004c 0093     		str	r3, [sp]
 517:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1036              		.loc 1 517 3 is_stmt 1 view .LVU318
 517:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1037              		.loc 1 517 33 is_stmt 0 view .LVU319
 1038 004e 0193     		str	r3, [sp, #4]
 518:Core/Src/main.c ****   {
 1039              		.loc 1 518 3 is_stmt 1 view .LVU320
 518:Core/Src/main.c ****   {
 1040              		.loc 1 518 7 is_stmt 0 view .LVU321
 1041 0050 0648     		ldr	r0, .L56
 1042 0052 6946     		mov	r1, sp
 1043 0054 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1044              	.LVL46:
 518:Core/Src/main.c ****   {
 1045              		.loc 1 518 6 discriminator 1 view .LVU322
 1046 0058 0028     		cmp	r0, #0
 1047 005a 05D1     		bne	.L55
 526:Core/Src/main.c **** 
 1048              		.loc 1 526 1 view .LVU323
 1049 005c 07B0     		add	sp, sp, #28
 1050              		@ sp needed
 1051 005e 00BD     		pop	{pc}
 1052              	.L53:
 509:Core/Src/main.c ****   }
ARM GAS  /tmp/ccRinTmK.s 			page 39


 1053              		.loc 1 509 5 is_stmt 1 view .LVU324
 1054 0060 FFF7FEFF 		bl	Error_Handler
 1055              	.LVL47:
 1056              	.L54:
 514:Core/Src/main.c ****   }
 1057              		.loc 1 514 5 view .LVU325
 1058 0064 FFF7FEFF 		bl	Error_Handler
 1059              	.LVL48:
 1060              	.L55:
 520:Core/Src/main.c ****   }
 1061              		.loc 1 520 5 view .LVU326
 1062 0068 FFF7FEFF 		bl	Error_Handler
 1063              	.LVL49:
 1064              	.L57:
 1065              		.align	2
 1066              	.L56:
 1067 006c 00000000 		.word	htim1
 1068 0070 002C0140 		.word	1073818624
 1069 0074 10270000 		.word	10000
 1070              		.cfi_endproc
 1071              	.LFE49:
 1073              		.section	.text.SystemClock_Config,"ax",%progbits
 1074              		.align	1
 1075              		.global	SystemClock_Config
 1076              		.syntax unified
 1077              		.code	16
 1078              		.thumb_func
 1080              	SystemClock_Config:
 1081              	.LFB45:
 281:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1082              		.loc 1 281 1 view -0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 80
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 1086 0000 10B5     		push	{r4, lr}
 1087              	.LCFI14:
 1088              		.cfi_def_cfa_offset 8
 1089              		.cfi_offset 4, -8
 1090              		.cfi_offset 14, -4
 1091 0002 94B0     		sub	sp, sp, #80
 1092              	.LCFI15:
 1093              		.cfi_def_cfa_offset 88
 282:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1094              		.loc 1 282 3 view .LVU328
 282:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1095              		.loc 1 282 22 is_stmt 0 view .LVU329
 1096 0004 3022     		movs	r2, #48
 1097 0006 0021     		movs	r1, #0
 1098 0008 08A8     		add	r0, sp, #32
 1099 000a FFF7FEFF 		bl	memset
 1100              	.LVL50:
 283:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1101              		.loc 1 283 3 is_stmt 1 view .LVU330
 283:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1102              		.loc 1 283 22 is_stmt 0 view .LVU331
 1103 000e 1024     		movs	r4, #16
 1104 0010 1022     		movs	r2, #16
ARM GAS  /tmp/ccRinTmK.s 			page 40


 1105 0012 0021     		movs	r1, #0
 1106 0014 04A8     		add	r0, sp, #16
 1107 0016 FFF7FEFF 		bl	memset
 1108              	.LVL51:
 284:Core/Src/main.c **** 
 1109              		.loc 1 284 3 is_stmt 1 view .LVU332
 284:Core/Src/main.c **** 
 1110              		.loc 1 284 28 is_stmt 0 view .LVU333
 1111 001a 1022     		movs	r2, #16
 1112 001c 0021     		movs	r1, #0
 1113 001e 6846     		mov	r0, sp
 1114 0020 FFF7FEFF 		bl	memset
 1115              	.LVL52:
 289:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1116              		.loc 1 289 3 is_stmt 1 view .LVU334
 289:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1117              		.loc 1 289 36 is_stmt 0 view .LVU335
 1118 0024 1223     		movs	r3, #18
 1119 0026 0893     		str	r3, [sp, #32]
 290:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1120              		.loc 1 290 3 is_stmt 1 view .LVU336
 290:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1121              		.loc 1 290 30 is_stmt 0 view .LVU337
 1122 0028 113B     		subs	r3, r3, #17
 1123 002a 0B93     		str	r3, [sp, #44]
 291:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1124              		.loc 1 291 3 is_stmt 1 view .LVU338
 291:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1125              		.loc 1 291 32 is_stmt 0 view .LVU339
 1126 002c 0D93     		str	r3, [sp, #52]
 292:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1127              		.loc 1 292 3 is_stmt 1 view .LVU340
 292:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1128              		.loc 1 292 41 is_stmt 0 view .LVU341
 1129 002e 0C94     		str	r4, [sp, #48]
 293:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1130              		.loc 1 293 3 is_stmt 1 view .LVU342
 293:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1131              		.loc 1 293 43 is_stmt 0 view .LVU343
 1132 0030 0E94     		str	r4, [sp, #56]
 294:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1133              		.loc 1 294 3 is_stmt 1 view .LVU344
 294:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1134              		.loc 1 294 34 is_stmt 0 view .LVU345
 1135 0032 0133     		adds	r3, r3, #1
 1136 0034 1093     		str	r3, [sp, #64]
 295:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 1137              		.loc 1 295 3 is_stmt 1 view .LVU346
 296:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 1138              		.loc 1 296 3 view .LVU347
 296:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 1139              		.loc 1 296 32 is_stmt 0 view .LVU348
 1140 0036 A023     		movs	r3, #160
 1141 0038 9B03     		lsls	r3, r3, #14
 1142 003a 1293     		str	r3, [sp, #72]
 297:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1143              		.loc 1 297 3 is_stmt 1 view .LVU349
ARM GAS  /tmp/ccRinTmK.s 			page 41


 298:Core/Src/main.c ****   {
 1144              		.loc 1 298 3 view .LVU350
 298:Core/Src/main.c ****   {
 1145              		.loc 1 298 7 is_stmt 0 view .LVU351
 1146 003c 08A8     		add	r0, sp, #32
 1147 003e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1148              	.LVL53:
 298:Core/Src/main.c ****   {
 1149              		.loc 1 298 6 discriminator 1 view .LVU352
 1150 0042 0028     		cmp	r0, #0
 1151 0044 17D1     		bne	.L62
 305:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 1152              		.loc 1 305 3 is_stmt 1 view .LVU353
 305:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 1153              		.loc 1 305 31 is_stmt 0 view .LVU354
 1154 0046 0723     		movs	r3, #7
 1155 0048 0493     		str	r3, [sp, #16]
 307:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1156              		.loc 1 307 3 is_stmt 1 view .LVU355
 307:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1157              		.loc 1 307 34 is_stmt 0 view .LVU356
 1158 004a 053B     		subs	r3, r3, #5
 1159 004c 0593     		str	r3, [sp, #20]
 308:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1160              		.loc 1 308 3 is_stmt 1 view .LVU357
 308:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1161              		.loc 1 308 35 is_stmt 0 view .LVU358
 1162 004e 0023     		movs	r3, #0
 1163 0050 0693     		str	r3, [sp, #24]
 309:Core/Src/main.c **** 
 1164              		.loc 1 309 3 is_stmt 1 view .LVU359
 309:Core/Src/main.c **** 
 1165              		.loc 1 309 36 is_stmt 0 view .LVU360
 1166 0052 0793     		str	r3, [sp, #28]
 311:Core/Src/main.c ****   {
 1167              		.loc 1 311 3 is_stmt 1 view .LVU361
 311:Core/Src/main.c ****   {
 1168              		.loc 1 311 7 is_stmt 0 view .LVU362
 1169 0054 0121     		movs	r1, #1
 1170 0056 04A8     		add	r0, sp, #16
 1171 0058 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1172              	.LVL54:
 311:Core/Src/main.c ****   {
 1173              		.loc 1 311 6 discriminator 1 view .LVU363
 1174 005c 0028     		cmp	r0, #0
 1175 005e 0CD1     		bne	.L63
 315:Core/Src/main.c ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 1176              		.loc 1 315 3 is_stmt 1 view .LVU364
 315:Core/Src/main.c ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 1177              		.loc 1 315 38 is_stmt 0 view .LVU365
 1178 0060 2023     		movs	r3, #32
 1179 0062 0093     		str	r3, [sp]
 316:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1180              		.loc 1 316 3 is_stmt 1 view .LVU366
 316:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1181              		.loc 1 316 36 is_stmt 0 view .LVU367
 1182 0064 103B     		subs	r3, r3, #16
ARM GAS  /tmp/ccRinTmK.s 			page 42


 1183 0066 0393     		str	r3, [sp, #12]
 317:Core/Src/main.c ****   {
 1184              		.loc 1 317 3 is_stmt 1 view .LVU368
 317:Core/Src/main.c ****   {
 1185              		.loc 1 317 7 is_stmt 0 view .LVU369
 1186 0068 6846     		mov	r0, sp
 1187 006a FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1188              	.LVL55:
 317:Core/Src/main.c ****   {
 1189              		.loc 1 317 6 discriminator 1 view .LVU370
 1190 006e 0028     		cmp	r0, #0
 1191 0070 05D1     		bne	.L64
 321:Core/Src/main.c **** 
 1192              		.loc 1 321 1 view .LVU371
 1193 0072 14B0     		add	sp, sp, #80
 1194              		@ sp needed
 1195 0074 10BD     		pop	{r4, pc}
 1196              	.L62:
 300:Core/Src/main.c ****   }
 1197              		.loc 1 300 5 is_stmt 1 view .LVU372
 1198 0076 FFF7FEFF 		bl	Error_Handler
 1199              	.LVL56:
 1200              	.L63:
 313:Core/Src/main.c ****   }
 1201              		.loc 1 313 5 view .LVU373
 1202 007a FFF7FEFF 		bl	Error_Handler
 1203              	.LVL57:
 1204              	.L64:
 319:Core/Src/main.c ****   }
 1205              		.loc 1 319 5 view .LVU374
 1206 007e FFF7FEFF 		bl	Error_Handler
 1207              	.LVL58:
 1208              		.cfi_endproc
 1209              	.LFE45:
 1211              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1212              		.align	2
 1213              	.LC6:
 1214 0000 53773B20 		.ascii	"Sw; Mn: [%d], Th: [%d], SH: [%d], SL: [%d], L1P: [%"
 1214      4D6E3A20 
 1214      5B25645D 
 1214      2C205468 
 1214      3A205B25 
 1215 0033 645D2C20 		.ascii	"d], L1N: [%d]\012\015\000"
 1215      4C314E3A 
 1215      205B2564 
 1215      5D0A0D00 
 1216 0043 00       		.align	2
 1217              	.LC9:
 1218 0044 54757262 		.ascii	"Turbo speed!\012\015\000"
 1218      6F207370 
 1218      65656421 
 1218      0A0D00
 1219 0053 00       		.align	2
 1220              	.LC11:
 1221 0054 54757274 		.ascii	"Turtle speed.\012\015\000"
 1221      6C652073 
 1221      70656564 
ARM GAS  /tmp/ccRinTmK.s 			page 43


 1221      2E0A0D00 
 1222              		.align	2
 1223              	.LC13:
 1224 0064 4E6F726D 		.ascii	"Normal speed\012\015\000"
 1224      616C2073 
 1224      70656564 
 1224      0A0D00
 1225 0073 00       		.align	2
 1226              	.LC15:
 1227 0074 4144433B 		.ascii	"ADC; Throttle: [%d], Regen: [%d]\012\015\000"
 1227      20546872 
 1227      6F74746C 
 1227      653A205B 
 1227      25645D2C 
 1228              		.section	.text.main,"ax",%progbits
 1229              		.align	1
 1230              		.global	main
 1231              		.syntax unified
 1232              		.code	16
 1233              		.thumb_func
 1235              	main:
 1236              	.LFB43:
  97:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1237              		.loc 1 97 1 view -0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 280
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1242              	.LCFI16:
 1243              		.cfi_def_cfa_offset 20
 1244              		.cfi_offset 4, -20
 1245              		.cfi_offset 5, -16
 1246              		.cfi_offset 6, -12
 1247              		.cfi_offset 7, -8
 1248              		.cfi_offset 14, -4
 1249 0002 DE46     		mov	lr, fp
 1250 0004 5746     		mov	r7, r10
 1251 0006 4646     		mov	r6, r8
 1252 0008 C0B5     		push	{r6, r7, lr}
 1253              	.LCFI17:
 1254              		.cfi_def_cfa_offset 32
 1255              		.cfi_offset 8, -32
 1256              		.cfi_offset 10, -28
 1257              		.cfi_offset 11, -24
 1258 000a CCB0     		sub	sp, sp, #304
 1259              	.LCFI18:
 1260              		.cfi_def_cfa_offset 336
 105:Core/Src/main.c **** 
 1261              		.loc 1 105 3 view .LVU376
 1262 000c FFF7FEFF 		bl	HAL_Init
 1263              	.LVL59:
 112:Core/Src/main.c **** 
 1264              		.loc 1 112 3 view .LVU377
 1265 0010 FFF7FEFF 		bl	SystemClock_Config
 1266              	.LVL60:
 119:Core/Src/main.c ****   MX_DMA_Init();
 1267              		.loc 1 119 3 view .LVU378
ARM GAS  /tmp/ccRinTmK.s 			page 44


 1268 0014 FFF7FEFF 		bl	MX_GPIO_Init
 1269              	.LVL61:
 120:Core/Src/main.c ****   // TODO: Uncomment these out
 1270              		.loc 1 120 3 view .LVU379
 1271 0018 FFF7FEFF 		bl	MX_DMA_Init
 1272              	.LVL62:
 122:Core/Src/main.c ****   MX_ADC_Init();
 1273              		.loc 1 122 3 view .LVU380
 1274 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1275              	.LVL63:
 123:Core/Src/main.c ****   MX_I2C1_Init();
 1276              		.loc 1 123 3 view .LVU381
 1277 0020 FFF7FEFF 		bl	MX_ADC_Init
 1278              	.LVL64:
 124:Core/Src/main.c ****   MX_I2C2_Init();
 1279              		.loc 1 124 3 view .LVU382
 1280 0024 FFF7FEFF 		bl	MX_I2C1_Init
 1281              	.LVL65:
 125:Core/Src/main.c ****   //MX_TIM3_Init();
 1282              		.loc 1 125 3 view .LVU383
 1283 0028 FFF7FEFF 		bl	MX_I2C2_Init
 1284              	.LVL66:
 127:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1285              		.loc 1 127 3 view .LVU384
 1286 002c FFF7FEFF 		bl	MX_TIM1_Init
 1287              	.LVL67:
 131:Core/Src/main.c ****   uint8_t speedHighSwitchValue    = 0; // 0 = Off, 1 = Selected (inverted at GPIO read)
 1288              		.loc 1 131 3 view .LVU385
 132:Core/Src/main.c ****   uint8_t speedLowSwitchValue     = 0; // 0 = Off, 1 = Selected (inverted at GPIO read)
 1289              		.loc 1 132 3 view .LVU386
 133:Core/Src/main.c ****   uint8_t lcd1SelPrevSwitchValue  = 0; // 0 = Off, 1 = Selected (inverted at GPIO read)
 1290              		.loc 1 133 3 view .LVU387
 134:Core/Src/main.c ****   uint8_t lcd1SelNextSwitchValue  = 0; // 0 = Off, 1 = Selected (inverted at GPIO read)
 1291              		.loc 1 134 3 view .LVU388
 135:Core/Src/main.c ****   uint8_t throttleStopSwitchValue = 0; // 0 = Run, 1 = Stop
 1292              		.loc 1 135 3 view .LVU389
 136:Core/Src/main.c ****   uint8_t speedSelect             = 1; // 0 = Low, 1 = Med, 2 = High, 3 = E-Stop
 1293              		.loc 1 136 3 view .LVU390
 137:Core/Src/main.c **** 
 1294              		.loc 1 137 3 view .LVU391
 140:Core/Src/main.c ****   uint16_t adcRegenValue    = 0;    // Disable regen
 1295              		.loc 1 140 3 view .LVU392
 141:Core/Src/main.c **** 
 1296              		.loc 1 141 3 view .LVU393
 144:Core/Src/main.c ****   uint8_t lcd1ShowPage = 0; // Integer changes the data shown on LCD1 (for now, serial)
 1297              		.loc 1 144 3 view .LVU394
 145:Core/Src/main.c ****    
 1298              		.loc 1 145 3 view .LVU395
 148:Core/Src/main.c ****   uint8_t Speed[16];
 1299              		.loc 1 148 3 view .LVU396
 149:Core/Src/main.c ****   uint8_t Pots[128];
 1300              		.loc 1 149 3 view .LVU397
 150:Core/Src/main.c **** 
 1301              		.loc 1 150 3 view .LVU398
 153:Core/Src/main.c **** 
 1302              		.loc 1 153 3 view .LVU399
 1303 0030 FFF7FEFF 		bl	ioctl_init
ARM GAS  /tmp/ccRinTmK.s 			page 45


 1304              	.LVL68:
 156:Core/Src/main.c **** 
 1305              		.loc 1 156 3 view .LVU400
 1306 0034 6348     		ldr	r0, .L86
 1307 0036 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1308              	.LVL69:
 161:Core/Src/main.c ****   HAL_GPIO_WritePin(LCD1_BL_GREEN_GPIO_Port, LCD1_BL_GREEN_Pin, 1);
 1309              		.loc 1 161 3 view .LVU401
 1310 003a 634C     		ldr	r4, .L86+4
 1311 003c 0022     		movs	r2, #0
 1312 003e 4021     		movs	r1, #64
 1313 0040 2000     		movs	r0, r4
 1314 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1315              	.LVL70:
 162:Core/Src/main.c ****   HAL_GPIO_WritePin(LCD1_BL_BLUE_GPIO_Port, LCD1_BL_BLUE_Pin, 1);
 1316              		.loc 1 162 3 view .LVU402
 1317 0046 0122     		movs	r2, #1
 1318 0048 8021     		movs	r1, #128
 1319 004a 2000     		movs	r0, r4
 1320 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1321              	.LVL71:
 163:Core/Src/main.c ****   while (1)
 1322              		.loc 1 163 3 view .LVU403
 1323 0050 8021     		movs	r1, #128
 1324 0052 0122     		movs	r2, #1
 1325 0054 4900     		lsls	r1, r1, #1
 1326 0056 2000     		movs	r0, r4
 1327 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1328              	.LVL72:
 145:Core/Src/main.c ****    
 1329              		.loc 1 145 11 is_stmt 0 view .LVU404
 1330 005c 0026     		movs	r6, #0
 1331 005e 4CE0     		b	.L76
 1332              	.LVL73:
 1333              	.L83:
 192:Core/Src/main.c ****       adcRegenValue    = ioctl_get_pot(IOCTL_REGEN_POT);    // get the adc value for the regen
 1334              		.loc 1 192 7 is_stmt 1 view .LVU405
 192:Core/Src/main.c ****       adcRegenValue    = ioctl_get_pot(IOCTL_REGEN_POT);    // get the adc value for the regen
 1335              		.loc 1 192 26 is_stmt 0 view .LVU406
 1336 0060 0020     		movs	r0, #0
 1337              	.LVL74:
 192:Core/Src/main.c ****       adcRegenValue    = ioctl_get_pot(IOCTL_REGEN_POT);    // get the adc value for the regen
 1338              		.loc 1 192 26 view .LVU407
 1339 0062 FFF7FEFF 		bl	ioctl_get_pot
 1340              	.LVL75:
 1341 0066 0790     		str	r0, [sp, #28]
 1342              	.LVL76:
 193:Core/Src/main.c **** 
 1343              		.loc 1 193 7 is_stmt 1 view .LVU408
 193:Core/Src/main.c **** 
 1344              		.loc 1 193 26 is_stmt 0 view .LVU409
 1345 0068 0120     		movs	r0, #1
 1346              	.LVL77:
 193:Core/Src/main.c **** 
 1347              		.loc 1 193 26 view .LVU410
 1348 006a FFF7FEFF 		bl	ioctl_get_pot
 1349              	.LVL78:
ARM GAS  /tmp/ccRinTmK.s 			page 46


 196:Core/Src/main.c ****         speedSelect = 0;
 1350              		.loc 1 196 7 is_stmt 1 view .LVU411
 196:Core/Src/main.c ****         speedSelect = 0;
 1351              		.loc 1 196 10 is_stmt 0 view .LVU412
 1352 006e 012F     		cmp	r7, #1
 1353 0070 04D0     		beq	.L78
 198:Core/Src/main.c ****         speedSelect = 2;
 1354              		.loc 1 198 14 is_stmt 1 view .LVU413
 198:Core/Src/main.c ****         speedSelect = 2;
 1355              		.loc 1 198 17 is_stmt 0 view .LVU414
 1356 0072 4346     		mov	r3, r8
 1357 0074 002B     		cmp	r3, #0
 1358 0076 03D1     		bne	.L79
 167:Core/Src/main.c ****     mainSwitchValue         = HAL_GPIO_ReadPin(MAIN_SW_IN_GPIO_Port, MAIN_SW_IN_Pin);
 1359              		.loc 1 167 29 view .LVU415
 1360 0078 0133     		adds	r3, r3, #1
 1361 007a 71E0     		b	.L66
 1362              	.L78:
 197:Core/Src/main.c ****       } else if (speedHighSwitchValue) {
 1363              		.loc 1 197 21 view .LVU416
 1364 007c 0023     		movs	r3, #0
 1365 007e 6FE0     		b	.L66
 1366              	.L79:
 199:Core/Src/main.c ****       }
 1367              		.loc 1 199 21 view .LVU417
 1368 0080 0223     		movs	r3, #2
 1369 0082 6DE0     		b	.L66
 1370              	.LVL79:
 1371              	.L84:
 206:Core/Src/main.c ****       } else {
 1372              		.loc 1 206 9 is_stmt 1 view .LVU418
 206:Core/Src/main.c ****       } else {
 1373              		.loc 1 206 22 is_stmt 0 view .LVU419
 1374 0084 0136     		adds	r6, r6, #1
 1375              	.LVL80:
 206:Core/Src/main.c ****       } else {
 1376              		.loc 1 206 22 view .LVU420
 1377 0086 F6B2     		uxtb	r6, r6
 1378              	.LVL81:
 219:Core/Src/main.c ****       // Page 1 - Switch positions
 1379              		.loc 1 219 5 is_stmt 1 view .LVU421
 1380              	.L69:
 223:Core/Src/main.c ****       // Page 2 - Speed 
 1381              		.loc 1 223 12 view .LVU422
 223:Core/Src/main.c ****       // Page 2 - Speed 
 1382              		.loc 1 223 15 is_stmt 0 view .LVU423
 1383 0088 012E     		cmp	r6, #1
 1384 008a 71D0     		beq	.L82
 235:Core/Src/main.c ****       // Page 3 - ADC and DAC
 1385              		.loc 1 235 12 is_stmt 1 view .LVU424
 235:Core/Src/main.c ****       // Page 3 - ADC and DAC
 1386              		.loc 1 235 15 is_stmt 0 view .LVU425
 1387 008c 022E     		cmp	r6, #2
 1388 008e 30D1     		bne	.L71
 237:Core/Src/main.c ****       HAL_UART_Transmit(&huart2,Pots,strlen(Pots),1000);  // Sending in normal mode
 1389              		.loc 1 237 7 is_stmt 1 view .LVU426
 1390 0090 4E49     		ldr	r1, .L86+8
ARM GAS  /tmp/ccRinTmK.s 			page 47


 1391 0092 0300     		movs	r3, r0
 1392              	.LVL82:
 237:Core/Src/main.c ****       HAL_UART_Transmit(&huart2,Pots,strlen(Pots),1000);  // Sending in normal mode
 1393              		.loc 1 237 7 is_stmt 0 view .LVU427
 1394 0094 079A     		ldr	r2, [sp, #28]
 1395 0096 08A8     		add	r0, sp, #32
 1396              	.LVL83:
 237:Core/Src/main.c ****       HAL_UART_Transmit(&huart2,Pots,strlen(Pots),1000);  // Sending in normal mode
 1397              		.loc 1 237 7 view .LVU428
 1398 0098 FFF7FEFF 		bl	sprintf
 1399              	.LVL84:
 238:Core/Src/main.c ****     }
 1400              		.loc 1 238 7 is_stmt 1 view .LVU429
 238:Core/Src/main.c ****     }
 1401              		.loc 1 238 38 is_stmt 0 view .LVU430
 1402 009c 08A8     		add	r0, sp, #32
 1403 009e FFF7FEFF 		bl	strlen
 1404              	.LVL85:
 238:Core/Src/main.c ****     }
 1405              		.loc 1 238 7 discriminator 1 view .LVU431
 1406 00a2 FA23     		movs	r3, #250
 1407 00a4 82B2     		uxth	r2, r0
 1408 00a6 4A48     		ldr	r0, .L86+12
 1409 00a8 9B00     		lsls	r3, r3, #2
 1410 00aa 08A9     		add	r1, sp, #32
 1411 00ac FFF7FEFF 		bl	HAL_UART_Transmit
 1412              	.LVL86:
 1413 00b0 1FE0     		b	.L71
 1414              	.LVL87:
 1415              	.L67:
 210:Core/Src/main.c ****       if (lcd1ShowPage == 0) { 
 1416              		.loc 1 210 12 is_stmt 1 view .LVU432
 210:Core/Src/main.c ****       if (lcd1ShowPage == 0) { 
 1417              		.loc 1 210 15 is_stmt 0 view .LVU433
 1418 00b2 5A46     		mov	r2, fp
 1419 00b4 002A     		cmp	r2, #0
 1420 00b6 03D0     		beq	.L70
 211:Core/Src/main.c ****         lcd1ShowPage = lcd1Pages;
 1421              		.loc 1 211 7 is_stmt 1 view .LVU434
 211:Core/Src/main.c ****         lcd1ShowPage = lcd1Pages;
 1422              		.loc 1 211 10 is_stmt 0 view .LVU435
 1423 00b8 002E     		cmp	r6, #0
 1424 00ba 57D0     		beq	.L81
 214:Core/Src/main.c ****       }
 1425              		.loc 1 214 9 is_stmt 1 view .LVU436
 214:Core/Src/main.c ****       }
 1426              		.loc 1 214 22 is_stmt 0 view .LVU437
 1427 00bc 013E     		subs	r6, r6, #1
 1428              	.LVL88:
 214:Core/Src/main.c ****       }
 1429              		.loc 1 214 22 view .LVU438
 1430 00be F6B2     		uxtb	r6, r6
 1431              	.LVL89:
 1432              	.L70:
 219:Core/Src/main.c ****       // Page 1 - Switch positions
 1433              		.loc 1 219 5 is_stmt 1 view .LVU439
 219:Core/Src/main.c ****       // Page 1 - Switch positions
ARM GAS  /tmp/ccRinTmK.s 			page 48


 1434              		.loc 1 219 8 is_stmt 0 view .LVU440
 1435 00c0 002E     		cmp	r6, #0
 1436 00c2 E1D1     		bne	.L69
 1437              	.LVL90:
 1438              	.L68:
 221:Core/Src/main.c ****       HAL_UART_Transmit(&huart2,Test,strlen(Test),1000);  // Sending in normal mode
 1439              		.loc 1 221 7 is_stmt 1 view .LVU441
 1440 00c4 4349     		ldr	r1, .L86+16
 1441 00c6 5A46     		mov	r2, fp
 1442 00c8 0492     		str	r2, [sp, #16]
 1443 00ca 0395     		str	r5, [sp, #12]
 1444 00cc 0293     		str	r3, [sp, #8]
 1445 00ce 0197     		str	r7, [sp, #4]
 1446 00d0 4346     		mov	r3, r8
 1447              	.LVL91:
 221:Core/Src/main.c ****       HAL_UART_Transmit(&huart2,Test,strlen(Test),1000);  // Sending in normal mode
 1448              		.loc 1 221 7 is_stmt 0 view .LVU442
 1449 00d2 0093     		str	r3, [sp]
 1450 00d4 2300     		movs	r3, r4
 1451 00d6 069A     		ldr	r2, [sp, #24]
 1452 00d8 2CA8     		add	r0, sp, #176
 1453              	.LVL92:
 221:Core/Src/main.c ****       HAL_UART_Transmit(&huart2,Test,strlen(Test),1000);  // Sending in normal mode
 1454              		.loc 1 221 7 view .LVU443
 1455 00da FFF7FEFF 		bl	sprintf
 1456              	.LVL93:
 222:Core/Src/main.c ****     } else if (lcd1ShowPage == 1) {
 1457              		.loc 1 222 7 is_stmt 1 view .LVU444
 222:Core/Src/main.c ****     } else if (lcd1ShowPage == 1) {
 1458              		.loc 1 222 38 is_stmt 0 view .LVU445
 1459 00de 2CA8     		add	r0, sp, #176
 1460 00e0 FFF7FEFF 		bl	strlen
 1461              	.LVL94:
 222:Core/Src/main.c ****     } else if (lcd1ShowPage == 1) {
 1462              		.loc 1 222 7 discriminator 1 view .LVU446
 1463 00e4 FA23     		movs	r3, #250
 1464 00e6 82B2     		uxth	r2, r0
 1465 00e8 3948     		ldr	r0, .L86+12
 1466 00ea 9B00     		lsls	r3, r3, #2
 1467 00ec 2CA9     		add	r1, sp, #176
 1468 00ee FFF7FEFF 		bl	HAL_UART_Transmit
 1469              	.LVL95:
 1470              	.L71:
 241:Core/Src/main.c ****     /* USER CODE END WHILE */
 1471              		.loc 1 241 5 is_stmt 1 view .LVU447
 1472 00f2 FA20     		movs	r0, #250
 1473 00f4 4000     		lsls	r0, r0, #1
 1474 00f6 FFF7FEFF 		bl	HAL_Delay
 1475              	.LVL96:
 164:Core/Src/main.c ****   {
 1476              		.loc 1 164 9 view .LVU448
 1477              	.L76:
 164:Core/Src/main.c ****   {
 1478              		.loc 1 164 3 view .LVU449
 167:Core/Src/main.c ****     mainSwitchValue         = HAL_GPIO_ReadPin(MAIN_SW_IN_GPIO_Port, MAIN_SW_IN_Pin);
 1479              		.loc 1 167 5 view .LVU450
 168:Core/Src/main.c ****     speedHighSwitchValue    = 1 - HAL_GPIO_ReadPin(SPEED_HIGH_SW_IN_GPIO_Port, SPEED_HIGH_SW_IN_Pin
ARM GAS  /tmp/ccRinTmK.s 			page 49


 1480              		.loc 1 168 5 view .LVU451
 168:Core/Src/main.c ****     speedHighSwitchValue    = 1 - HAL_GPIO_ReadPin(SPEED_HIGH_SW_IN_GPIO_Port, SPEED_HIGH_SW_IN_Pin
 1481              		.loc 1 168 31 is_stmt 0 view .LVU452
 1482 00fa 9023     		movs	r3, #144
 1483 00fc DB05     		lsls	r3, r3, #23
 1484 00fe 9A46     		mov	r10, r3
 1485 0100 1021     		movs	r1, #16
 1486 0102 1800     		movs	r0, r3
 1487 0104 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1488              	.LVL97:
 1489 0108 0690     		str	r0, [sp, #24]
 1490              	.LVL98:
 169:Core/Src/main.c ****     speedLowSwitchValue     = 1 - HAL_GPIO_ReadPin(SPEED_LOW_SW_IN_GPIO_Port, SPEED_LOW_SW_IN_Pin);
 1491              		.loc 1 169 5 is_stmt 1 view .LVU453
 169:Core/Src/main.c ****     speedLowSwitchValue     = 1 - HAL_GPIO_ReadPin(SPEED_LOW_SW_IN_GPIO_Port, SPEED_LOW_SW_IN_Pin);
 1492              		.loc 1 169 35 is_stmt 0 view .LVU454
 1493 010a 8021     		movs	r1, #128
 1494 010c 5046     		mov	r0, r10
 1495 010e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1496              	.LVL99:
 169:Core/Src/main.c ****     speedLowSwitchValue     = 1 - HAL_GPIO_ReadPin(SPEED_LOW_SW_IN_GPIO_Port, SPEED_LOW_SW_IN_Pin);
 1497              		.loc 1 169 29 discriminator 1 view .LVU455
 1498 0112 0124     		movs	r4, #1
 1499 0114 201A     		subs	r0, r4, r0
 1500 0116 C3B2     		uxtb	r3, r0
 1501 0118 9846     		mov	r8, r3
 1502              	.LVL100:
 170:Core/Src/main.c ****     lcd1SelPrevSwitchValue  = 1 - HAL_GPIO_ReadPin(LCD1_SELECT_PREV_GPIO_Port, LCD1_SELECT_PREV_Pin
 1503              		.loc 1 170 5 is_stmt 1 view .LVU456
 170:Core/Src/main.c ****     lcd1SelPrevSwitchValue  = 1 - HAL_GPIO_ReadPin(LCD1_SELECT_PREV_GPIO_Port, LCD1_SELECT_PREV_Pin
 1504              		.loc 1 170 35 is_stmt 0 view .LVU457
 1505 011a 8021     		movs	r1, #128
 1506 011c 4900     		lsls	r1, r1, #1
 1507 011e 5046     		mov	r0, r10
 1508 0120 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1509              	.LVL101:
 170:Core/Src/main.c ****     lcd1SelPrevSwitchValue  = 1 - HAL_GPIO_ReadPin(LCD1_SELECT_PREV_GPIO_Port, LCD1_SELECT_PREV_Pin
 1510              		.loc 1 170 29 discriminator 1 view .LVU458
 1511 0124 271A     		subs	r7, r4, r0
 1512 0126 FFB2     		uxtb	r7, r7
 1513              	.LVL102:
 171:Core/Src/main.c ****     lcd1SelNextSwitchValue  = 1 - HAL_GPIO_ReadPin(LCD1_SELECT_NEXT_GPIO_Port, LCD1_SELECT_NEXT_Pin
 1514              		.loc 1 171 5 is_stmt 1 view .LVU459
 171:Core/Src/main.c ****     lcd1SelNextSwitchValue  = 1 - HAL_GPIO_ReadPin(LCD1_SELECT_NEXT_GPIO_Port, LCD1_SELECT_NEXT_Pin
 1515              		.loc 1 171 35 is_stmt 0 view .LVU460
 1516 0128 2B4B     		ldr	r3, .L86+20
 1517 012a 9B46     		mov	fp, r3
 1518 012c 0221     		movs	r1, #2
 1519 012e 1800     		movs	r0, r3
 1520 0130 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1521              	.LVL103:
 171:Core/Src/main.c ****     lcd1SelNextSwitchValue  = 1 - HAL_GPIO_ReadPin(LCD1_SELECT_NEXT_GPIO_Port, LCD1_SELECT_NEXT_Pin
 1522              		.loc 1 171 29 discriminator 1 view .LVU461
 1523 0134 251A     		subs	r5, r4, r0
 1524 0136 EDB2     		uxtb	r5, r5
 1525              	.LVL104:
 172:Core/Src/main.c ****     throttleStopSwitchValue = HAL_GPIO_ReadPin(THROTTLE_STOP_SW_IN_GPIO_Port, THROTTLE_STOP_SW_IN_P
ARM GAS  /tmp/ccRinTmK.s 			page 50


 1526              		.loc 1 172 5 is_stmt 1 view .LVU462
 172:Core/Src/main.c ****     throttleStopSwitchValue = HAL_GPIO_ReadPin(THROTTLE_STOP_SW_IN_GPIO_Port, THROTTLE_STOP_SW_IN_P
 1527              		.loc 1 172 35 is_stmt 0 view .LVU463
 1528 0138 0421     		movs	r1, #4
 1529 013a 5846     		mov	r0, fp
 1530 013c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1531              	.LVL105:
 172:Core/Src/main.c ****     throttleStopSwitchValue = HAL_GPIO_ReadPin(THROTTLE_STOP_SW_IN_GPIO_Port, THROTTLE_STOP_SW_IN_P
 1532              		.loc 1 172 29 discriminator 1 view .LVU464
 1533 0140 241A     		subs	r4, r4, r0
 1534 0142 E3B2     		uxtb	r3, r4
 1535 0144 9B46     		mov	fp, r3
 1536              	.LVL106:
 173:Core/Src/main.c **** 
 1537              		.loc 1 173 5 is_stmt 1 view .LVU465
 173:Core/Src/main.c **** 
 1538              		.loc 1 173 31 is_stmt 0 view .LVU466
 1539 0146 4021     		movs	r1, #64
 1540 0148 5046     		mov	r0, r10
 1541 014a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1542              	.LVL107:
 1543 014e 0400     		movs	r4, r0
 1544              	.LVL108:
 175:Core/Src/main.c ****       //HAL_GPIO_WritePin(LCD1_BL_RED_GPIO_Port, LCD1_BL_RED_Pin, 0);
 1545              		.loc 1 175 5 is_stmt 1 view .LVU467
 177:Core/Src/main.c ****       //HAL_GPIO_WritePin(LCD1_BL_RED_GPIO_Port, LCD1_BL_RED_Pin, 1);
 1546              		.loc 1 177 5 view .LVU468
 179:Core/Src/main.c ****     
 1547              		.loc 1 179 5 view .LVU469
 182:Core/Src/main.c ****       // Shut everything down
 1548              		.loc 1 182 5 view .LVU470
 182:Core/Src/main.c ****       // Shut everything down
 1549              		.loc 1 182 8 is_stmt 0 view .LVU471
 1550 0150 0128     		cmp	r0, #1
 1551 0152 85D1     		bne	.L83
 185:Core/Src/main.c ****       adcThrottleValue    = 2048; // Set the throttle to neutral
 1552              		.loc 1 185 27 view .LVU472
 1553 0154 0700     		movs	r7, r0
 1554              	.LVL109:
 187:Core/Src/main.c ****     } else {
 1555              		.loc 1 187 27 view .LVU473
 1556 0156 2148     		ldr	r0, .L86+24
 1557              	.LVL110:
 186:Core/Src/main.c ****       adcRegenValue       = 4095; // Set the regen to max
 1558              		.loc 1 186 27 view .LVU474
 1559 0158 8023     		movs	r3, #128
 1560 015a 1B01     		lsls	r3, r3, #4
 1561 015c 0793     		str	r3, [sp, #28]
 184:Core/Src/main.c ****       speedLowSwitchValue = 1;    // Set slow speed
 1562              		.loc 1 184 27 view .LVU475
 1563 015e 0323     		movs	r3, #3
 1564              	.L66:
 1565              	.LVL111:
 204:Core/Src/main.c ****       if (lcd1ShowPage < lcd1Pages) { 
 1566              		.loc 1 204 5 is_stmt 1 view .LVU476
 204:Core/Src/main.c ****       if (lcd1ShowPage < lcd1Pages) { 
 1567              		.loc 1 204 8 is_stmt 0 view .LVU477
ARM GAS  /tmp/ccRinTmK.s 			page 51


 1568 0160 002D     		cmp	r5, #0
 1569 0162 A6D0     		beq	.L67
 205:Core/Src/main.c ****         lcd1ShowPage ++;
 1570              		.loc 1 205 7 is_stmt 1 view .LVU478
 205:Core/Src/main.c ****         lcd1ShowPage ++;
 1571              		.loc 1 205 10 is_stmt 0 view .LVU479
 1572 0164 012E     		cmp	r6, #1
 1573 0166 8DD9     		bls	.L84
 208:Core/Src/main.c ****       }
 1574              		.loc 1 208 22 view .LVU480
 1575 0168 0026     		movs	r6, #0
 1576              	.LVL112:
 208:Core/Src/main.c ****       }
 1577              		.loc 1 208 22 view .LVU481
 1578 016a ABE7     		b	.L68
 1579              	.LVL113:
 1580              	.L81:
 212:Core/Src/main.c ****       } else {
 1581              		.loc 1 212 22 view .LVU482
 1582 016c 0226     		movs	r6, #2
 1583              	.LVL114:
 212:Core/Src/main.c ****       } else {
 1584              		.loc 1 212 22 view .LVU483
 1585 016e 8BE7     		b	.L69
 1586              	.LVL115:
 1587              	.L82:
 225:Core/Src/main.c ****         sprintf(Speed, "Turbo speed!\n\r");
 1588              		.loc 1 225 7 is_stmt 1 view .LVU484
 225:Core/Src/main.c ****         sprintf(Speed, "Turbo speed!\n\r");
 1589              		.loc 1 225 10 is_stmt 0 view .LVU485
 1590 0170 022B     		cmp	r3, #2
 1591 0172 12D0     		beq	.L85
 227:Core/Src/main.c ****         sprintf(Speed, "Turtle speed.\n\r");
 1592              		.loc 1 227 14 is_stmt 1 view .LVU486
 227:Core/Src/main.c ****         sprintf(Speed, "Turtle speed.\n\r");
 1593              		.loc 1 227 17 is_stmt 0 view .LVU487
 1594 0174 002B     		cmp	r3, #0
 1595 0176 1AD1     		bne	.L75
 228:Core/Src/main.c ****       } else if (speedSelect == 0) {
 1596              		.loc 1 228 9 is_stmt 1 view .LVU488
 1597 0178 28AA     		add	r2, sp, #160
 1598 017a 194B     		ldr	r3, .L86+28
 1599              	.LVL116:
 228:Core/Src/main.c ****       } else if (speedSelect == 0) {
 1600              		.loc 1 228 9 is_stmt 0 view .LVU489
 1601 017c 31CB     		ldmia	r3!, {r0, r4, r5}
 1602 017e 31C2     		stmia	r2!, {r0, r4, r5}
 1603              	.LVL117:
 228:Core/Src/main.c ****       } else if (speedSelect == 0) {
 1604              		.loc 1 228 9 view .LVU490
 1605 0180 1B68     		ldr	r3, [r3]
 1606 0182 1360     		str	r3, [r2]
 1607              	.L74:
 234:Core/Src/main.c ****     } else if (lcd1ShowPage == 2) {
 1608              		.loc 1 234 7 is_stmt 1 view .LVU491
 234:Core/Src/main.c ****     } else if (lcd1ShowPage == 2) {
 1609              		.loc 1 234 39 is_stmt 0 view .LVU492
ARM GAS  /tmp/ccRinTmK.s 			page 52


 1610 0184 28A8     		add	r0, sp, #160
 1611 0186 FFF7FEFF 		bl	strlen
 1612              	.LVL118:
 234:Core/Src/main.c ****     } else if (lcd1ShowPage == 2) {
 1613              		.loc 1 234 7 discriminator 1 view .LVU493
 1614 018a FA23     		movs	r3, #250
 1615 018c 82B2     		uxth	r2, r0
 1616 018e 1048     		ldr	r0, .L86+12
 1617 0190 9B00     		lsls	r3, r3, #2
 1618 0192 28A9     		add	r1, sp, #160
 1619 0194 FFF7FEFF 		bl	HAL_UART_Transmit
 1620              	.LVL119:
 1621 0198 ABE7     		b	.L71
 1622              	.LVL120:
 1623              	.L85:
 226:Core/Src/main.c ****       } else if (speedSelect == 0) {
 1624              		.loc 1 226 9 is_stmt 1 view .LVU494
 1625 019a 28AA     		add	r2, sp, #160
 1626 019c 114B     		ldr	r3, .L86+32
 1627              	.LVL121:
 226:Core/Src/main.c ****       } else if (speedSelect == 0) {
 1628              		.loc 1 226 9 is_stmt 0 view .LVU495
 1629 019e 31CB     		ldmia	r3!, {r0, r4, r5}
 1630 01a0 31C2     		stmia	r2!, {r0, r4, r5}
 1631              	.LVL122:
 226:Core/Src/main.c ****       } else if (speedSelect == 0) {
 1632              		.loc 1 226 9 view .LVU496
 1633 01a2 1100     		movs	r1, r2
 1634 01a4 1A88     		ldrh	r2, [r3]
 1635 01a6 0A80     		strh	r2, [r1]
 1636 01a8 9B78     		ldrb	r3, [r3, #2]
 1637 01aa 8B70     		strb	r3, [r1, #2]
 1638 01ac EAE7     		b	.L74
 1639              	.LVL123:
 1640              	.L75:
 229:Core/Src/main.c ****         sprintf(Speed, "Emegergency Stop!\n\r");
 1641              		.loc 1 229 14 is_stmt 1 view .LVU497
 232:Core/Src/main.c ****       }
 1642              		.loc 1 232 9 view .LVU498
 1643 01ae 28AA     		add	r2, sp, #160
 1644 01b0 0D4B     		ldr	r3, .L86+36
 1645              	.LVL124:
 232:Core/Src/main.c ****       }
 1646              		.loc 1 232 9 is_stmt 0 view .LVU499
 1647 01b2 31CB     		ldmia	r3!, {r0, r4, r5}
 1648 01b4 31C2     		stmia	r2!, {r0, r4, r5}
 1649              	.LVL125:
 232:Core/Src/main.c ****       }
 1650              		.loc 1 232 9 view .LVU500
 1651 01b6 1100     		movs	r1, r2
 1652 01b8 1A88     		ldrh	r2, [r3]
 1653 01ba 0A80     		strh	r2, [r1]
 1654 01bc 9B78     		ldrb	r3, [r3, #2]
 1655 01be 8B70     		strb	r3, [r1, #2]
 1656 01c0 E0E7     		b	.L74
 1657              	.L87:
 1658 01c2 C046     		.align	2
ARM GAS  /tmp/ccRinTmK.s 			page 53


 1659              	.L86:
 1660 01c4 00000000 		.word	htim1
 1661 01c8 00080048 		.word	1207961600
 1662 01cc 74000000 		.word	.LC15
 1663 01d0 00000000 		.word	huart2
 1664 01d4 00000000 		.word	.LC6
 1665 01d8 00040048 		.word	1207960576
 1666 01dc FF0F0000 		.word	4095
 1667 01e0 54000000 		.word	.LC11
 1668 01e4 44000000 		.word	.LC9
 1669 01e8 64000000 		.word	.LC13
 1670              		.cfi_endproc
 1671              	.LFE43:
 1673              		.global	huart2
 1674              		.section	.bss.huart2,"aw",%nobits
 1675              		.align	2
 1678              	huart2:
 1679 0000 00000000 		.space	136
 1679      00000000 
 1679      00000000 
 1679      00000000 
 1679      00000000 
 1680              		.global	htim3
 1681              		.section	.bss.htim3,"aw",%nobits
 1682              		.align	2
 1685              	htim3:
 1686 0000 00000000 		.space	72
 1686      00000000 
 1686      00000000 
 1686      00000000 
 1686      00000000 
 1687              		.global	htim1
 1688              		.section	.bss.htim1,"aw",%nobits
 1689              		.align	2
 1692              	htim1:
 1693 0000 00000000 		.space	72
 1693      00000000 
 1693      00000000 
 1693      00000000 
 1693      00000000 
 1694              		.global	hi2c_lcd
 1695              		.section	.bss.hi2c_lcd,"aw",%nobits
 1696              		.align	2
 1699              	hi2c_lcd:
 1700 0000 00000000 		.space	84
 1700      00000000 
 1700      00000000 
 1700      00000000 
 1700      00000000 
 1701              		.global	hi2c_dac
 1702              		.section	.bss.hi2c_dac,"aw",%nobits
 1703              		.align	2
 1706              	hi2c_dac:
 1707 0000 00000000 		.space	84
 1707      00000000 
 1707      00000000 
 1707      00000000 
ARM GAS  /tmp/ccRinTmK.s 			page 54


 1707      00000000 
 1708              		.global	hdma_adc
 1709              		.section	.bss.hdma_adc,"aw",%nobits
 1710              		.align	2
 1713              	hdma_adc:
 1714 0000 00000000 		.space	68
 1714      00000000 
 1714      00000000 
 1714      00000000 
 1714      00000000 
 1715              		.global	hadc
 1716              		.section	.bss.hadc,"aw",%nobits
 1717              		.align	2
 1720              	hadc:
 1721 0000 00000000 		.space	64
 1721      00000000 
 1721      00000000 
 1721      00000000 
 1721      00000000 
 1722              		.text
 1723              	.Letext0:
 1724              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1725              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1726              		.file 5 "Core/Inc/ioctl.h"
 1727              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x8.h"
 1728              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 1729              		.file 8 "/usr/lib/gcc/arm-none-eabi/13.2.0/include/stddef.h"
 1730              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1731              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1732              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 1733              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1734              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1735              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 1736              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 1737              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1738              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 1739              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1740              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 1741              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1742              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1743              		.file 22 "/usr/arm-none-eabi/include/string.h"
 1744              		.file 23 "/usr/arm-none-eabi/include/stdio.h"
 1745              		.file 24 "<built-in>"
ARM GAS  /tmp/ccRinTmK.s 			page 55


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccRinTmK.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccRinTmK.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccRinTmK.s:355    .text.MX_GPIO_Init:00000168 $d
     /tmp/ccRinTmK.s:366    .text.MX_DMA_Init:00000000 $t
     /tmp/ccRinTmK.s:371    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/ccRinTmK.s:418    .text.MX_DMA_Init:0000002c $d
     /tmp/ccRinTmK.s:423    .text.main_timer_task:00000000 $t
     /tmp/ccRinTmK.s:429    .text.main_timer_task:00000000 main_timer_task
     /tmp/ccRinTmK.s:451    .text.main_timer_task:0000000c $d
     /tmp/ccRinTmK.s:456    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccRinTmK.s:462    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccRinTmK.s:497    .text.HAL_TIM_PeriodElapsedCallback:00000014 $d
     /tmp/ccRinTmK.s:502    .text.Error_Handler:00000000 $t
     /tmp/ccRinTmK.s:508    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccRinTmK.s:540    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/ccRinTmK.s:545    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/ccRinTmK.s:609    .text.MX_USART2_UART_Init:00000030 $d
     /tmp/ccRinTmK.s:1678   .bss.huart2:00000000 huart2
     /tmp/ccRinTmK.s:615    .text.MX_ADC_Init:00000000 $t
     /tmp/ccRinTmK.s:620    .text.MX_ADC_Init:00000000 MX_ADC_Init
     /tmp/ccRinTmK.s:751    .text.MX_ADC_Init:0000007c $d
     /tmp/ccRinTmK.s:1720   .bss.hadc:00000000 hadc
     /tmp/ccRinTmK.s:757    .text.MX_I2C1_Init:00000000 $t
     /tmp/ccRinTmK.s:762    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
     /tmp/ccRinTmK.s:848    .text.MX_I2C1_Init:0000004c $d
     /tmp/ccRinTmK.s:1706   .bss.hi2c_dac:00000000 hi2c_dac
     /tmp/ccRinTmK.s:855    .text.MX_I2C2_Init:00000000 $t
     /tmp/ccRinTmK.s:860    .text.MX_I2C2_Init:00000000 MX_I2C2_Init
     /tmp/ccRinTmK.s:946    .text.MX_I2C2_Init:0000004c $d
     /tmp/ccRinTmK.s:1699   .bss.hi2c_lcd:00000000 hi2c_lcd
     /tmp/ccRinTmK.s:953    .text.MX_TIM1_Init:00000000 $t
     /tmp/ccRinTmK.s:958    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/ccRinTmK.s:1067   .text.MX_TIM1_Init:0000006c $d
     /tmp/ccRinTmK.s:1692   .bss.htim1:00000000 htim1
     /tmp/ccRinTmK.s:1074   .text.SystemClock_Config:00000000 $t
     /tmp/ccRinTmK.s:1080   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccRinTmK.s:1212   .rodata.main.str1.4:00000000 $d
     /tmp/ccRinTmK.s:1229   .text.main:00000000 $t
     /tmp/ccRinTmK.s:1235   .text.main:00000000 main
     /tmp/ccRinTmK.s:1660   .text.main:000001c4 $d
     /tmp/ccRinTmK.s:1675   .bss.huart2:00000000 $d
     /tmp/ccRinTmK.s:1685   .bss.htim3:00000000 htim3
     /tmp/ccRinTmK.s:1682   .bss.htim3:00000000 $d
     /tmp/ccRinTmK.s:1689   .bss.htim1:00000000 $d
     /tmp/ccRinTmK.s:1696   .bss.hi2c_lcd:00000000 $d
     /tmp/ccRinTmK.s:1703   .bss.hi2c_dac:00000000 $d
     /tmp/ccRinTmK.s:1713   .bss.hdma_adc:00000000 hdma_adc
     /tmp/ccRinTmK.s:1710   .bss.hdma_adc:00000000 $d
     /tmp/ccRinTmK.s:1717   .bss.hadc:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
ARM GAS  /tmp/ccRinTmK.s 			page 56


HAL_NVIC_EnableIRQ
HAL_GPIO_TogglePin
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
ioctl_init
HAL_TIM_Base_Start_IT
ioctl_get_pot
sprintf
strlen
HAL_UART_Transmit
HAL_Delay
HAL_GPIO_ReadPin
